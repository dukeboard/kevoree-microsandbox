// $ANTLR 2.7.2: "java.tree.g" -> "JavaTreeParser.java"$

public interface JavaTreeParserTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int JAVADOC_OPEN = 4;
	int JAVADOC_CLOSE = 5;
	int INT = 6;
	int ID = 7;
	int SEMI = 8;
	int WS = 9;
	int PACKAGE_DEF = 10;
	int IMPORT = 11;
	int CLASS_DEF = 12;
	int IDENT = 13;
	int INTERFACE_DEF = 14;
	int TYPE = 15;
	int ARRAY_DECLARATOR = 16;
	int TK_void = 17;
	int TK_boolean = 18;
	int TK_byte = 19;
	int TK_char = 20;
	int TK_short = 21;
	int TK_float = 22;
	int TK_long = 23;
	int TK_double = 24;
	int MODIFIERS = 25;
	int TK_private = 26;
	int TK_public = 27;
	int TK_protected = 28;
	int TK_static = 29;
	int TK_transient = 30;
	int TK_final = 31;
	int TK_abstract = 32;
	int TK_native = 33;
	int TK_threadsafe = 34;
	int TK_synchronized = 35;
	int TK_const = 36;
	int TK_volatile = 37;
	int TK_strictfp = 38;
	int EXTENDS_CLAUSE = 39;
	int IMPLEMENTS_CLAUSE = 40;
	int OBJBLOCK = 41;
	int STATIC_INIT = 42;
	int INSTANCE_INIT = 43;
	int CTOR_DEF = 44;
	int METHOD_DEF = 45;
	int VARIABLE_DEF = 46;
	int PARAMETER_DEF = 47;
	int LBRACK = 48;
	int ASSIGN = 49;
	int ARRAY_INIT = 50;
	int PARAMETERS = 51;
	int TK_throws = 52;
	int DOT = 53;
	int STAR = 54;
	int SLIST = 55;
	int LABELED_STAT = 56;
	int TK_if = 57;
	int TK_for = 58;
	int FOR_INIT = 59;
	int FOR_CONDITION = 60;
	int FOR_ITERATOR = 61;
	int TK_while = 62;
	int TK_do = 63;
	int TK_break = 64;
	int TK_continue = 65;
	int TK_return = 66;
	int TK_switch = 67;
	int TK_throw = 68;
	int EMPTY_STAT = 69;
	int CASE_GROUP = 70;
	int TK_case = 71;
	int TK_default = 72;
	int TK_try = 73;
	int TK_finally = 74;
	int TK_catch = 75;
	int ELIST = 76;
	int EXPR = 77;
	int QUESTION = 78;
	int PLUS_ASSIGN = 79;
	int MINUS_ASSIGN = 80;
	int STAR_ASSIGN = 81;
	int DIV_ASSIGN = 82;
	int MOD_ASSIGN = 83;
	int SR_ASSIGN = 84;
	int BSR_ASSIGN = 85;
	int SL_ASSIGN = 86;
	int BAND_ASSIGN = 87;
	int BXOR_ASSIGN = 88;
	int BOR_ASSIGN = 89;
	int LOR = 90;
	int LAND = 91;
	int BOR = 92;
	int BXOR = 93;
	int BAND = 94;
	int NOT_EQUAL = 95;
	int EQUAL = 96;
	int LT = 97;
	int GT = 98;
	int LE = 99;
	int GE = 100;
	int SL = 101;
	int SR = 102;
	int BSR = 103;
	int PLUS = 104;
	int MINUS = 105;
	int DIV = 106;
	int MOD = 107;
	int INC = 108;
	int DEC = 109;
	int POST_INC = 110;
	int POST_DEC = 111;
	int BNOT = 112;
	int LNOT = 113;
	int TK_instanceof = 114;
	int UNARY_MINUS = 115;
	int UNARY_PLUS = 116;
	int TK_this = 117;
	int TK_class = 118;
	int TK_new = 119;
	int TK_super = 120;
	int METHOD_CALL = 121;
	int TYPECAST = 122;
	int TK_true = 123;
	int TK_false = 124;
	int TK_null = 125;
	int CTOR_CALL = 126;
	int SUPER_CTOR_CALL = 127;
	int INDEX_OP = 128;
	int NUM_INT = 129;
	int CHAR_LITERAL = 130;
	int STRING_LITERAL = 131;
	int NUM_FLOAT = 132;
	int NUM_DOUBLE = 133;
	int NUM_LONG = 134;
}
