<!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="concepts"></a>1 Concepts</h2> 
<p>This informative chapter provides an easily approachable description of the design
  of XForms, describing the major components and how they relate. Not every feature of
  XForms is covered here. For a complete, normative description of XForms, refer to the
  remainder of this document.</p> 
  <div class="div2">
<h3><a name="concepts-purpose-presentation"></a>1.1 Purpose and Presentation</h3>
  <p>For explanatory purposes, a form can be considered to consist of 'purpose', 'presentation',
  and 'data'. Some examples:</p>
  <table width="100%"><thead><tr><td><b>Purpose</b></td><td><b>Presentation</b></td><td><b>Data</b></td></tr>
  </thead><tbody>
  <tr><td>Data collection</td><td>Arrangement of form controls</td><td>Registration information</td></tr>
  <tr><td>Time card</td><td>How dates are entered</td><td>Days and hours worked</td></tr>
  <tr><td>Order form</td><td>How to render the form controls on small devices</td><td>Order, shipping, and payment info</td></tr>
  <tr><td>Information Please</td><td>How the form integrates with a Web site</td><td>User contact information</td></tr>
  </tbody></table>
  
  <p>The design of existing Web forms didn't separate the purpose from the presentation
  of a form, and additionally offered only a restricted representation for data captured through the form. This is the primary difference between XForms and previous form technologies.</p></div><div class="div2"> 
    
<h3><a name="concepts-xhtml"></a>1.2  Current Approach: XHTML</h3> 
  <p> Take for instance a simple eCommerce form authored in XHTML 1.0:</p>
  <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
          "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"&gt;
&lt;body&gt;
&lt;form action="http://example.com/submit" method="post"&gt;
  &lt;span&gt;Select Payment Method: &lt;/span&gt;
  &lt;input type="radio" name="paytype" value="cash"&gt;Cash&lt;/input&gt;
  &lt;input type="radio" name="paytype" value="credit"&gt;Credit&lt;/input&gt;&lt;br/&gt;
  &lt;label&gt;Credit Card Number: &lt;input type="text" name="cc"/&gt;&lt;/label&gt;&lt;br/&gt;
  &lt;label&gt;Expiration Date: &lt;input type="text" name="exp"/&gt;&lt;/label&gt;&lt;br/&gt;
  &lt;input type="submit"/&gt;
&lt;/form&gt;
&lt;/body&gt;
&lt;/html&gt;</pre></td></tr></table><p>A browser might render this form as follows:</p>
<img src="images/concepts-xhtml.png" alt="screen shot of a graphic rendering">
<p>This form makes no effort to separate purpose (data collection semantics) from  presentation (the <code>&lt;input&gt;</code> form controls), and offers no
control over the basic name/value formatting of the resulting data. XForms greatly
improves the expressive capabilities of electronic forms.</p>
</div>
<div class="div2">
<h3><a name="concepts-xfu"></a>1.3 Stepping Up to XForms</h3>
<p>XForms are comprised of separate sections that describe what the form does, and how
the form is to be presented. This allows for flexible presentation options, making it possible for classic XHTML
form controls, as well as other form control sets such as WML to be leveraged, as
shown here.</p>
<img src="images/arch1.jpg" alt="puzzle pieces; 'XForm Model' on the left, on the right 'XForms User Interface', 'XHTML', 'WML', and a stack of 'proprietary' pieces">
<p>The simplest case involves authoring only the new XForms
<a title="" href="#">form control</a>s, leaving out the other sections of the form. To convert the previous form into
XForms this way, an <code>xform</code> element is needed in the <code>head</code> section of
the document:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
&lt;/xform:xform&gt;</pre></td></tr></table>
<p>With these changes to the containing document, the previous example could be rewritten
like this:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne xmlns="http://www.w3.org/2001/06/xforms" ref="paytype"&gt;
  &lt;caption&gt;Select Payment Method&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="cash"&gt;Cash&lt;/item&gt;
    &lt;item value="credit"&gt;Credit&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;
&lt;textbox xmlns="http://www.w3.org/2001/06/xforms" ref="cc"&gt;
  &lt;caption&gt;Credit Card Number&lt;/caption&gt;
&lt;/textbox&gt;
&lt;textbox xmlns="http://www.w3.org/2001/06/xforms" ref="exp"&gt;
  &lt;caption&gt;Expiration Date&lt;/caption&gt;
&lt;/textbox&gt;
&lt;submit xmlns="http://www.w3.org/2001/06/xforms"/&gt;</pre></td></tr></table>
<p>Notice the following features of this design:</p>
<ul><li><p>The user interface is not hard-coded to use radio buttons. Different devices
  (such as a voice browser) can render the concept of "selectOne" as appropriate.</p></li>
<li><p>Form controls always have captions directly associated with them, as child elements.</p></li>
<li><p>There is no need for an enclosing <code>form</code> element.</p></li>
<li><p>Element names for form controls have been changed: <code>textbox</code> is a specific
element, rather than a <code>type</code> attribute on <code>input</code>, as in XHTML.</p> </li>
<li><p>Data entered through the form controls ends up submitted as XML.</p></li>
</ul>
<p>With these changes, the <a title="" href="#">XForms Processor</a>
will be able to directly submit XML instance data. The XML is constructed by creating a root
element with child elements reflecting the names given to each form control.  For instance,
the submitted data might look like this:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!-- envelope, generated separately --&gt;
&lt;Envelope&gt;
  &lt;Body&gt;</pre></td></tr></table><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>    &lt;!-- serialized instance data --&gt;
    &lt;paytype&gt;Credit&lt;/paytype&gt;
    &lt;cc&gt;12354677890123456&lt;/cc&gt;
    &lt;exp&gt;04-2001&lt;/exp&gt;</pre></td></tr></table>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>  &lt;!-- envelope, generated separately --&gt;
  &lt;/Body&gt;
&lt;/Envelope&gt;</pre></td></tr></table></div>
<div class="div2">
<h3><a name="concpts-instance"></a>1.4 Providing XML Instance Data</h3>
<p>Understandably, authors will often desire greater control over exact construction of the
submitted instance data. One common case might be submitting to a server XML data that is
validated against a predefined DTD or XML Schema.</p>
<p>XForms keeps track of the state of the partially filled form through
<a title="" href="#">instance data</a>, which provides an outline
of the desired  XML data, including namespace information. The instance data starts
off with the initial values for the form, is updated as the user fills the form, and
eventually is serialized and submitted. The initial instance data is taken from the
<code>instance</code> element inside the <code>xform</code> element, defined as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
  &lt;xform:instance&gt;
    &lt;payment type="credit" xmlns="http://commerce.example.com/payment"&gt;
      &lt;cc/&gt;
      &lt;exp/&gt;
    &lt;/payment&gt;
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;</pre></td></tr></table>
<p>This design has features worth calling out:</p><ul>
<li><p>There is complete flexibility in the structure of the XML. Notice that the item
  <code>paytype</code> is now expressed as an attribute <code>type</code> of the element
  <code>payment</code>.</p></li>
<li><p>Empty elements <code>cc</code> and <code>exp</code> serve as placeholders in the XML structure,
  and will be filled in with form data provided by the user.</p></li>
<li><p>An initial value (<code>"credit"</code>) for the form control is provided through the
  <code>type</code> attribute in the instance data. In the submitted XML, this initial value will
  be replaced by the user input, if any.</p></li>
<li><p>The instance data provides a unique namespace, which will be used when the XML gets
  submitted.</p></li></ul>
  <p>To connect this instance data with  form controls, the
<code>ref</code> attributes on the form controls need to point to the proper part of the instance
data, using <a title="" href="#">binding expressions</a>:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>  &lt;selectOne ref="payment/@type"&gt;
  ...
  &lt;inputText ref="payment/cc"&gt;
  ...
  &lt;inputText ref="payment/exp"&gt;</pre></td></tr></table>
<p>Binding expressions are based on XPath <a href="#">[ref-xpath-1.0]</a>, including
  the use of the '@' character to refer to attributes, as seen here.</p>
  </div> 
<div class="div2">
<h3><a name="concepts-model"></a>1.5 The XForms Model</h3>
<p>The earlier XHTML form in <a href="#"><b>???</b></a>. Even in this short form,
there are several aspects that would be desirable to express, but would only be possible
through the addition of unstructured script code:
</p>
<ul><li><p>The credit card information fields <code>cc</code> and <code>exp</code> are
only relevant if the "Credit" option is chosen in the <code>paytype</code> field.</p></li>
<li><p>The credit card information fields <code>cc</code> and <code>exp</code> should be
required when the "Credit" option is chosen in the <code>paytype</code> field.</p></li>
<li><p>The field <code>cc</code> should accept digits only, and should have exactly 14,
15, or 16 digits.</p></li>
<li><p>The field <code>exp</code> should accept only valid month/date combinations.</p></li></ul>
<p>By specifying a 3rd component, the <a title="" href="#">XForms Model</a>,
authors can include rich declarative datatype and validation information in forms.</p>
<table border="1" summary="Editorial note: MJD"><tr><td width="50%" valign="top" align="left"><b>Editorial note: MJD</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">The examples here are sketchy out of necessity; this section
will need to be rewritten after the Schema Basic task force delivers its syntax recommendations.</td></tr></table>
<p>An XForms Model consists of <a title="" href="#">model items</a>, which
include XML Schema datatype information <a href="#">[ref-xschema-2]</a> as well as properties
specific to XForms.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;!-- add to the cc model item the following: --&gt;
relevant="value('payment/@type') == 'credit'"
required="true"
datatype of "xform:string"
facet pattern of "\d{14,16}"

&lt;!-- add to the exp model item the following: --&gt;
relevant="value('payment/@type') == 'credit'"
required="true"
datatype of "xform:gYearMonth"</pre></td></tr></table>
</div>
<div class="div2">
<h3><a name="concepts-multiple"></a>1.6 Multiple Forms per Document</h3>
<p>XForms places no limits on the number of individual forms that can be placed in a single
<a title="" href="#">containing document</a>. When multiple forms share
the same containing document, multiple
<code>xform</code> elements are needed. The first <code>xform</code> element may skip a unique <code>id</code>
attribute (as have all the examples above), but subsequent  <code>xform</code> elements require
an <code>id</code> so that they can be referenced from elsewhere in the containing document.</p>
<p>The other side of the equation is that form controls throughout the document need to specify
which <code>xform</code> element is associated with the instance data to which they bind. This is
accomplished through an <code>xform</code> attribute alongside the <code>ref</code> attribute. The
default for the <code>xform</code> attribute is to refer to the first <code>xform</code> element in
document order.</p><p>To add a second form, an opinion poll, to our commerce example, the
following would be authored in the head section of the XHTML:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xform:xform&gt;
  &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
  &lt;xform:instance&gt;
     ...payment instance data...
  &lt;/xform:instance&gt;
&lt;/xform:xform&gt;

&lt;xform:xform id="poll"&gt;
  &lt;xform:submitInfo target="http://example.com/poll" method="..."/&gt;
&lt;/xform:xform&gt;</pre></td></tr></table><p>Additionally, the following form control markup in the body:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="pollOption" xform="poll"  xmlns="http://www.w3.org/2001/06/xforms"&gt;
  &lt;caption&gt;How useful is this page to you?&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="0"&gt;Not at all helpful&lt;/item&gt;
    &lt;item value="1"&gt;Barely helpful&lt;/item&gt;
    &lt;item value="2"&gt;Somewhat helpful&lt;/item&gt;
    &lt;item value="3"&gt;Very helpful&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;
&lt;submit xform="poll"  xmlns="http://www.w3.org/2001/06/xforms"/&gt;</pre></td></tr></table>
<p>The main difference to note here is the use of <code>xform="poll"</code>,
  which identifies which form the form control binds to.</p></div>
<div class="div2">
<h3><a name="concepts-advancedUI"></a>1.7 Additional User Interface Capabilities</h3>
<p>The visual layout appearance of the initial XHTML forms such as the above example
(<a href="#"><b>???</b></a>) leaves much to be desired. </p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Need extended UI example here</pre></td></tr></table>
</div>
<div class="div2">
<h3><a name="concepts-complete"></a>1.8 Complete Document</h3>
<p>This chapter presented various bits and pieces of XForms as a tool to help readers
understand the design. Presented here is the entire XHTML+XForms document presented
in one segment.</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
          "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:xform="http://www.w3.org/2001/06/xforms"
      xml:lang="en"&gt;
&lt;head&gt;
  &lt;title&gt;XForms in XHTML&lt;/title&gt;

  &lt;xform:xform&gt;
    &lt;xform:submitInfo target="http://example.com/submit" method="..."/&gt;
    &lt;xform:instance&gt;
      &lt;payment type="credit" xmlns="http://commerce.wizard"&gt;
        &lt;cc/&gt;
        &lt;exp/&gt;
      &lt;/payment&gt;
    &lt;/xform:instance&gt;
  &lt;/xform:xform&gt;

  &lt;xform:xform id="poll"&gt;
    &lt;xform:submitInfo target="http://example.com/poll" method="..."/&gt;
  &lt;/xform:xform&gt;

&lt;/head&gt;
&lt;body&gt;
    ... include advanced UI markup here ...
&lt;/body&gt;
&lt;/html&gt;</pre></td></tr></table>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1"> 
<h2><a name="intro"></a>1 About the XForms 1.0 Specification</h2> 
<div class="div2"> 
<h3><a name="intro-background"></a>1.1 Background</h3> 
<p>Forms are an important part of the Web, and they continue to be the
      primary means of interactivity used by many Web sites. Web applications and
      eCommerce solutions have sparked the demand for better Web forms with richer
      interactions. XForms are the response to this demand--extended analysis,
      followed by the creation of a new platform-independent markup language for
      online interaction between an <a title="" href="#">XForms Processor</a> and
      a remote entity. XForms are the successor to XHTML forms, and benefit from the
      lessons learned in the years of HTML forms implementation experience.</p>
    <p>Further background information on XForms can be found at 
      <a href="http://www.w3.org/MarkUp/Forms/">http://www.w3.org/MarkUp/Forms</a>.</p>
  </div> 
  <div class="div2">
    
<h3><a name="intro-reading"></a>1.2 Reading the Specification</h3>
    <p>This specification has been written with various types of readers in
      mind--in particular XForms authors and XForms implementors. We hope the
      specification will provide authors with the tools they need to write efficient,
      attractive, and accessible documents, without overexposing them to the XForms
      implementation details. Implementors, however, should find all they need to
      build conforming XForms Processors. The specification begins with a general
      presentation of XForms and becomes more and more technical and specific towards
      the end. For quick access to information, a general table of contents, specific
      tables of contents at the beginning of each section, and an index provide easy
      navigation, in both the electronic and printed versions.</p>
    <p>The specification has been written with two modes of presentation in
      mind: electronic and printed. In case of a discrepancy, the electronic version
      is considered the authoritative version of the document.</p>
  </div>
  <div class="div2">
    
<h3><a name="intro-org"></a>1.3 How the Specification is Organized</h3>
    <p>The specification is organized into the following chapters:</p>
    <dl>
      
        <dt class="label">Chapters 1 and 2</dt>
        <dd>
          <p>An introduction to XForms The introduction includes a brief
            tutorial on XForms and a discussion of design principles behind XForms.</p>
        </dd>
      
      
        <dt class="label">Chapters 3 and up</dt>
        <dd>
          <p>XForms reference manual. The bulk of the reference manual consists
            of the specification of XForms. This reference defines what may go into XForms
            and how XForms Processors must interpret the various components in order to
            claim conformance.</p>
        </dd>
      
      
        <dt class="label">Appendixes</dt>
        <dd>
          <p>Appendixes contain a normative description of XForms described in
            XML Schema, information on optional function libraries, references, a change
            history, and other useful information.</p>
        </dd>
      
    </dl>
  </div>
  <div class="div2">
    
<h3><a name="intro-conventions"></a>1.4 Documentation Conventions</h3>
    <p>The following highlighting and typography is used to present technical
      material in this document and other documents from the XForms Working
      Group:</p>
      
    <p>Special terms are defined in their own chapter; hyperlinks connect uses
      of the term to the definition.</p>
      
    <p>Throughout this document, the namespace prefixes "<code>xform:</code>",
      "<code>xsd:</code>", and "<code>xsi:</code>" are used to denote the XForms, 
      XML Schema, and XML Schema for Instances namespaces
      respectively. This is by convention only; any namespace prefix may be used in
      practice.</p>
      
    <p>Official terms are defined in the following manner: [<a title="term" name="def-term">Definition</a>: 
    You can find most <b>terms</b> in the chapter <a href="#"><b>???</b></a>].
    Links to <a title="" href="#">term</a>s may be specially highlighted in the text.</p>
    
    <p>The XML representations of various elements within XForms are presented
  as follows: Listed are the element name, names of all attributes, allowed
  values of attributes appearing after a "=" character, default values of
  attributes appearing after a ":" character, and allowed content. One or
  more headings below the table provide additional explanatory information.</p>
  <div class="example">
<h5>Example: XML Syntax Representation &lt;<code>example</code>&gt;</h5><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;example
  count = integer
  size = (small | medium | large) : medium
&gt;
  &lt;!-- Content: (allowed-content) --&gt;
&lt;/example&gt;</pre></td></tr></table><blockquote><p>
    <b>count = integer</b> - description of this attribute
    <br><b>size = (small | medium | large) : medium</b> - description of
    this attribute
  </p></blockquote></div>  
  
  
  
  
  <p>Non-normative short examples are set off typographically:</p>
    <blockquote><p>Example Item</p></blockquote><p>or</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>Example Item</pre></td></tr></table>
    
    
  <p>References to external documents appear as follows: <a href="#">[ref-example]</a>
  with links to the references section of this document.</p><dl>
  <dt class="label"><a name="ref-example"></a>Sample Reference</dt><dd><cite>Reference</cite> - linked
  to from above.</dd></dl>
  
  <p>The following highlighting is used for non-normative commentary:</p>
  
  <div class="note"><p class="prefix"><b>Note:</b></p> <p>A general admonition to readers.</p></div>
  
  <table border="1" summary="Editorial note: Editorial Note Name"><tr><td width="50%" valign="top" align="left"><b>Editorial note: Editorial Note Name</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2"> Editorial commentary.</td></tr></table>
  
  <div class="issue"><p class="prefix"><a name="issue-id"></a><b>Issue (issue-id):</b></p><p class="prefix"><b>Issue-Name</b></p>
  <p> A specific issue to which input from readers is requested.</p></div>
  
  </div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="model"></a>1 The XForms Model</h2> 

<div class="div2">
<h3><a name="model-intro"></a>1.1 Introduction</h3>
<p>Chapter <a href="#"><b>???</b></a> described how XForms uses the XML Schema datatyping system, which can constrain the <a title="" href="#">value space</a> of datatypes that can be used in data collection. This chapter introduces a different set of properties, called <a title="" href="#">model item properties</a>, which define XForms-specific behaviors and metadata useful for data collection.</p>
</div>

<div class="div2">
<h3><a name="model-prop"></a>1.2 Model Item Properties</h3>

<p>Model item properties fall into two basic categories:</p><ul><li><p><a title="" href="#">Computed expressions</a> are XPath expressions that provide a value to the XForms Processor. The value is recomputed at certain times, according to the XForms Processing Model (see <a href="#"><b>???</b></a>).</p></li><li><p>All other properties are fixed, static values that the XForms Processor evaluates only once.</p></li></ul>
  
<p>The following properties are available for all <a title="" href="#">model items</a>,
  and their syntax is explained throughout this chapter. For each property the following information is provided:</p><blockquote><p>Description<br>Computed Expression (yes or no)<br>Legal Values<br>Default Value<br>Additional descriptive text</p></blockquote><div class="div3">
<h4><a name="model-prop-name"></a>1.2.1 name</h4>
<p>Description: provides a specific name for the model item.</p>
<p>Computed Expression: No</p><p>Legal Values: only values of type <code>xsd:NCName</code></p>
<p>Default Value: none.</p>
<p>Authors can associate a human-readable name with a model item through 
  the use of the <code>name</code> property. Each <code>name</code> should be 
  unique within the scope of the XForms Model where it is declared.</p>

</div>

<div class="div3">
<h4><a name="model-prop-type"></a>1.2.2 type</h4><p>Description: assigns a Schema datatype.</p><p>Computed Expression: No</p><p>Legal Values: any <code>xsd:QName</code> representing a Schema datatype.</p><p>Default Value: <code>xsd:anyType</code></p><p>The concept of typed data is important to forms. The assignment of a particular datatype to a model item affects validation of the data it can accept, as well as affecting which form controls to which it can bind.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>The XForms Model uses properties "name" and "type"
as in XML Schema;
the concrete syntax used to define XForm Models, and
consequently the use of these properties  will be
made concrete in a forthcoming revision of this Working Draft.
</p></div></div><div class="div3">
<h4><a name="model-prop-readOnly"></a>1.2.3 readOnly</h4>
<p>Description: describes whether the value is restricted from changing. 
  The ability of form controls to have focus and appear in the navigation order is unaffected 
  by this property.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible to <code>boolean</code>.</p>
<p>Default Value: <code>false</code>.</p>
<p>When evaluating to <code>true</code>, this property indicates that the XForms Processor should not allow any changes to the bound instance data item.</p><p>In addition to restricting value changes, the <code>readOnly</code> property 
  provides a hint to the XForms User Interface. Form controls 
  bound to a model item with the <code>readOnly</code> 
  property should indicate that entering or changing the value is not allowed. 
  The hint provided has no effect on visibility, focus, or navigation order.</p>
</div>

<div class="div3">
<h4><a name="model-prop-required"></a>1.2.4 required</h4>
<p>Description: describes whether a value is required before the instance 
  data is submitted.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression that is convertible to <code>boolean</code></p>
<p>Default Value: <code>false</code>.</p>
<p>Often forms require certain values to be entered. This may be 
  a static requirement, or may only be the case if some condition is satisfied. When evaluating to <code>true</code>, this property indicates that a non-empty instance data item is required before a submission of instance data can occur. Non-empty is defined as:</p><ol><li><p>If the bound instance data item is the text content of an element, the element  must not have the <code>xsi:nil</code> attribute set to <code>true</code>.</p></li><li><p>The bound instance data item must be convertible to an XPath <code>string</code> with a length greater than zero.</p></li></ol>
<p>Except as noted below, the <code>required</code> property does not provide 
  a hint to the XForms User Interface regarding visibility, focus, or navigation order.
  XForms authors are strongly encouraged to make sure that form controls that
  accept <code>required</code> data are visible. An XForms Processor may provide a
  unique indication that a form control is required, and may provide immediate feedback, including limiting navigation, for required form controls.</p>

<div class="issue"><p class="prefix"><a name="issue-default-default"></a><b>Issue (issue-default-default):</b></p><p>It might be useful to set the default for the
required attribute for an entire XForms Model. What should the default default be?
How could we assign a default for a single XForms Model? This could apply to other
attributes as well, e.g. readOnly, etc...</p></div>
<p>The chapter <a href="#"><b>???</b></a> contains details on how the XForms Processor enforces required values.</p></div>

<div class="div3">
<h4><a name="model-prop-relevant"></a>1.2.5 relevant</h4>
<p>Description: indicates whether the model item is currently relevant to the
  rest of the XForms Model. XForms Processors would typically not render an
  associated form control, including children, when the value is <code>false</code>.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible to <code>boolean</code></p>
<p>Default Value: <code>true</code>.</p>
<p>Many forms have fields dependent on other conditions. For example, a form might 
  ask whether the respondent owns a car. It is only appropriate to ask for further information 
  about their car if they have indicated that they own one.</p><p>When evaluating to <code>true</code>, this property indicates that the XForms Processor should render a form control, and conversely, when evaluating to <code>false</code>, indicates that the form control should not be rendered.</p>
<p>The <code>relevant</code> property provides hints to the XForms User Interface regarding 
  visibility, focus, and navigation order. In general, when <code>true</code>, associated 
  form controls should be made visible. When <code>false</code>, associated form
  controls should be made unavailable, removed from the navigation order, 
  and not allowed focus.</p>
<p>The following table shows the user interface interaction between <code>required</code> and 
  <code>relevant</code>.</p>
<table border="1" cellspacing="1" cellpadding="4" summary="shows combinations of depends and required">
<tbody><tr><td> </td><td><code>required="true"</code></td><td><code>required="false"</code></td></tr>
<tr><td><code>relevant="true"</code></td>
<td>The form control (and any children) should be visible or available to 
  the user. The XForms User Interface may indicate that a value is required.</td>
  <td>The form control (and any children) should be visible or available to 
  the user. The XForms User Interface may indicate that a value is optional.</td></tr>
  <tr><td><code>relevant="false"</code></td>
  <td>The form control (and any children) should be hidden or unavailable to 
  the user. Entering a value or obtaining focus should not be allowed. The 
  XForms User Interface may indicate that should the form control become relevant, 
  a value would be required.</td><td>The form control (and any children) should be
  hidden or unavailable to the user. Entering a value or obtaining focus should not
  be allowed.</td></tr></tbody></table>
 </div>

<div class="div3">
<h4><a name="model-prop-calculate"></a>1.2.6 calculate</h4>
<p>Description: indicates that the instance data item associated with the model item is to 
  be dynamically calculated.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression is convertible  to an XPath datatype compatible 
  with the associated XML Schema datatype.</p>
<p>Default Value: none.</p>
<p>An XForms Model may include model items that are computed from the other values 
  elsewhere. For example, the sum over line items for quantity times unit price, 
  or the amount of tax to be paid on an order. The computed value can be represented 
  as a computed expression using the values of other model items. The XForms Processing
  Model indicates how and when the calculation is recomputed.</p>
</div>

<div class="div3">
<h4><a name="model-prop-priority"></a>1.2.7 priority</h4>
<p>Description: indicates the relative priority for calculations of the 
  model item.</p><p>Computed Expression: No</p>
<p>Legal Values: any expression that is convertible to an integer in the range 
  0-32767.</p>
<p>Default Value: 0.</p>
<p>For model items that are calculated, this optional property specifies a calculation 
  order. The XForms Processing Model uses this property to determine the calculation order for multiple calculations.</p>
</div>

<div class="div3">
<h4><a name="model-prop-validate"></a>1.2.8 validate</h4>
<p>Description: specifies the predicate that needs to be satisfied for the associated instance data item to be considered valid.</p><p>Computed Expression: Yes</p>
<p>Legal Values: any expression that is convertible to <code>boolean</code></p>
<p>Default Value: <code>true</code>.</p>
<p>An XForms Model may include model items that need to be validated. When evaluating to <code>true</code>, indicates that the model item 
  is considered valid. The chapter <a href="#"><b>???</b></a>  describes 
  details such as immediate validation vs. onsubmit validation.</p>
<p>Computed expressions used here are not restricted to examining the instance 
  data item they are invoked on. XPath, plus the extensions in this chapter, provide 
  the means to traverse the instance data, as well as call-outs to external script, enabling potentially complex validations.</p>
<p>The XForms User Interface may indicate whether a form control is currently valid or 
  invalid.</p>
<div class="issue"><p class="prefix"><a name="issue-cascade"></a><b>Issue (issue-cascade):</b></p><p>Will the <code>validate</code> property be evaluated on
  all the parent or child model items whenever a value changes? We need to make sure
  that inter-model item constraints will get evaluated.</p></div>
</div>
</div>

<div class="div2">
<h3><a name="model-using"></a>1.3 Using Datatypes in the XForms Model</h3>
<p>The following section is being rewritten with the guidance of the XML Schema Working Group. In its current state, it is an informative listing of the functionality that we are planning in XForms 1.0, with illustrative examples of similar functionality in XML Schema. A subsequent Working Draft will contain normative details on how the functionality is described in terms of XForms.</p>
  
<div class="div3">
<h4><a name="model-using-atomic"></a>1.3.1 Atomic Datatype</h4>
<p>At the simplest level, it is necessary to associate a datatype with a model item. This has the effect of restricting the allowable values of the associated instance data item to valid representations of the lexical space of the datatype, including enforcing of any constraining facets.</p>
<p>Example Schema Syntax: declaring a datatype based on an <code>xsd:string</code> plus additional constraining facet would be accomplished as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:restriction base="xsd:string"&gt;
    &lt;xsd:minLength value="1"/&gt;
  &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>


</div>

<div class="div3">
<h4><a name="model-using-enum"></a>1.3.2 Closed Enumeration</h4>
<p>Often it is necessary to restrict the allowable values of the associated instance data item to a closed list of alternatives. Also under consideration is a method to obtain a list at runtime, for example, from an XPath node-set.</p>



<p>Example Schema Syntax: declaring a datatype allowing enumerated values of an <code>xsd:string</code> would be accomplished as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:restriction base="xsd:string"&gt;
    &lt;xsd:enumeration value="Mastercard"/&gt;
    &lt;xsd:enumeration value="Diner's Club"/&gt;
    &lt;xsd:enumeration value="American Express"/&gt;
  &lt;/xsd:restriction&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>

</div><div class="div3">
<h4><a name="model-using-openenum"></a>1.3.3 Open Enumeration</h4><p>A special case of enumerated datatypes is the common form design pattern of a list, with an 'other, please specify' choice. This is referred to as an open enumeration.</p><p>Example Schema Syntax: declaring an open enumeration is possible through a combination of union and enumeration features, as follows:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:union memberTypes="xsd:string"&gt;
    &lt;xsd:simpleType&gt;
      &lt;xsd:restriction base="xsd:string"&gt;
        &lt;xsd:enumeration value="Mastercard"/&gt;
        &lt;xsd:enumeration value="Diner's Club"/&gt;
        &lt;xsd:enumeration value="American Express"/&gt;
      &lt;/xsd:restriction&gt;
    &lt;/xsd:simpleType&gt;
  &lt;/xsd:union&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table></div>


  
<div class="div3">
<h4><a name="model-using-union"></a>1.3.4 Union</h4>
<p> It may be desirable for data collection purpose to allow an instance data item to be a valid lexical value of one among several datatypes. Unions are defined in XML Schema.</p>
<p>Example Schema Syntax:  declaring a datatype allowing either a <code>creditCardType</code> or <code>bonusProgramType</code> value would be as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType&gt;
  &lt;xsd:union memberTypes="creditCardType bonusProgramType"/&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table>
</div><div class="div3">
<h4><a name="model-using-array"></a>1.3.5 Multiple Selection</h4><p>Some form controls, such as <code>selectMany</code>, have the notion of supporting more than one simpleType value at any given time. This corresponds with Schema list datatypes.</p><p>Example Schema Syntax: declaring a list-derived datatype would be as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:simpleType name="listOfMyIntType"&gt;
  &lt;xsd:list itemType="xsd:int"/&gt;
&lt;/xsd:simpleType&gt;</pre></td></tr></table></div>

<div class="div3">
<h4><a name="model-using-repeat"></a>1.3.6 Repeating Line Item</h4>
<p>It is common for certain types of forms, such as order forms, to contain repeating structures, typically line items. If each individual structure were represented as a Schema complexType, a line item group would be analogous to the <code>sequence</code> construct.</p>
<p>Example Schema Syntax: a datatype allowing a sequence of child elements would be declared as follows:</p>
<table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;xsd:complexType&gt;
  &lt;xsd:sequence&gt;
    &lt;xsd:element name="child" type="xform:string" minOccurs="0" maxOccurs="unbounded"/&gt;
  &lt;/xsd:sequence&gt;
&lt;/xsd:complexType&gt;</pre></td></tr></table>
<p>Chapter <a href="#"><b>???</b></a> contains details on representing this with XForms User Interface form controls, as well as details for how this relates to the instance data in chapter <a href="#"><b>???</b></a>.</p></div>

<div class="div3">
<h4><a name="model-using-switch"></a>1.3.7 Alternate Representation</h4>
<p>In some forms, alternate representations might be necessary for underlying instance data structures.</p>
<p>Example Schema Syntax: a Schema <code>choice</code> element is roughly analogous to this, although XForms uses a more dynamic version. Examples of this are found in <a href="#"><b>???</b></a></p>



</div>
</div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="title"></a>1 Title</h2>
<p>x</p> 
  <div class="div2"> 
    
<h3><a name="N1000A"></a>1.1 x</h3> 
  </div> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1"> 
<h2><a name="terms"></a>1 Terminology</h2> <dl>  <dt class="label">binding</dt> 
<dd> 
<p>[<a title="binding" name="def-binding">Definition</a>: The connection between a form control and a
       model item and an instance data item, represented as a binding expression.]</p> 
    </dd> 
    
    
    <dt class="label">binding expression</dt> 
    <dd> 
      <p>[<a title="binding expression" name="def-binding-expression">Definition</a>: An XPath
       addressing expression used by the binding to connect form controls to other
       parts of XForms.]</p> 
    </dd> 
    
    
    <dt class="label">computed expression</dt> 
    <dd> 
      <p>[<a title="computed expression" name="def-computed-expression">Definition</a>: An XPath
       expression used by model item properties such as relevant and calculate to
       include dynamic functionality in XForms.]</p> 
    </dd> 
    
    
    <dt class="label">containing document</dt> 
    <dd> 
      <p>[<a title="containing document" name="def-containing-document">Definition</a>: A specific
      document, for example an XHTML document, in which one or more &lt;xform&gt; elements
      are found.]</p> 
    </dd> 
        
    <dt class="label">datatype</dt> 
    <dd> 
      <p>[<a title="datatype" name="def-datatype">Definition</a>: A 3-tuple, consisting of a) a
      set of distinct values, called its value space, b) a set of lexical
      representations, called its lexical space, and c) a set of facets that
      characterize properties of the value space, individual values or lexical items.
      This definition is taken from XML Schema <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
    
    
    <dt class="label">facet</dt> 
    <dd> 
      <p>[<a title="facet" name="def-facet">Definition</a>: A single defining aspect of a
       value space. Generally speaking, each facet characterizes a value space along
       independent axes or dimensions. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p>
    </dd> 
    
    
    <dt class="label">form control</dt> 
    <dd> 
      <p>[<a title="form control" name="def-form-control">Definition</a>: A user interface
       control or "widget" that serves as a point of user interaction.]</p> 
    </dd> 
   
    
    <dt class="label">instance data</dt>
    <dd> 
      <p>[<a title="instance data" name="def-instance-data">Definition</a>: An internal tree representation
      of the values and state of all the instance data items associated with a particular form.]</p> 
    </dd> 
   
    
    <dt class="label">instance data item</dt> 
    <dd> 
      <p>[<a title="instance data item" name="def-instance-data-item">Definition</a>: An internal representation
      of the value and state of a single piece of data corresponding to a Schema simpleType,
      constrained by the definition of a model item.]</p> 
    </dd> 
   
    
    <dt class="label">lexical space</dt> 
    <dd> 
      <p>[<a title="lexical space" name="def-lexical-space">Definition</a>: A lexical space is the
      set of valid literals for a datatype. This definition is taken from XML Schema
      <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">model item</dt> 
    <dd> 
      <p>[<a title="model item" name="def-model-item">Definition</a>: An abstract unit of data-collection
      within the XForms Model, which defines a XML Schema datatype and possibly other form-specific
      constraints on a single piece of collected data.]</p> 
    </dd> 
   
    
    <dt class="label">model item property</dt> 
    <dd> 
      <p>[<a title="model item property" name="def-model-item-property">Definition</a>: A single, XForms-specific
      defining aspect of a model item..]</p> 
    </dd> 
   
    
    <dt class="label">value space</dt> 
    <dd> 
      <p>[<a title="value space" name="def-value-space">Definition</a>: A set of values for
       a given datatype. Each value in the value space of a datatype is denoted by one
       or more literals in its lexical space. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Model</dt> 
    <dd> 
      <p>[<a title="XForms Model" name="def-XForms-Model">Definition</a>: The non-visible
       definition of an XML form as specified by XForms. The XForms Model defines the
       individual model items and constraints and other run-time aspects of XForms.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Processor</dt> 
    <dd> 
      <p>[<a title="XForms Processor" name="def-XForms-Processor">Definition</a>: A
       software application or program that implements the XForms
       specification.]</p> 
    </dd> 
   
   
  </dl> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="acks"></a>A Acknowledgements (Non-Normative)</h2> 
<p>The Authors of this document are:</p>
<ul>
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Micah Dubinko 
    , Cardiff 
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li>
  <li> 
    Roland Merrick 
    , IBM 
  </li>
  <li> 
    T. V. Raman 
    , IBM 
  </li>
  <li>
    Linda Bucksay Welsh
    , Intel
     (<i>Until April 2001</i>) 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
    </li>
    <li>
      Rob McDougall 
      , JetForm Corporation 
    </li>
  <li>
    John McCarthy
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Frank Olken
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li>Panagiotis Reveliotis
    , Phillips
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li><li>Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li>
    Dave Raggett
    , W3C/OpenWave
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>
  
  <p>This document was written with the participation of the XForms Working
        Group, which currently consists of the following members:</p> 
<ul> 
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li><li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li><li> 
    Micah Dubinko 
    , Cardiff 
  </li> 
  <li>
    Driss Eddaifi
    , Ecole Mohammadia d'Ing&eacute;nieurs
  </li>
  <li>
    Michalis Petropoulos
    , Enosys Markets, Inc.
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li> 
  <li> 
    Frank Boumphrey 
    , HTML Writer's Guild 
  </li> 
  <li> 
    Roland Merrick 
    , IBM 
  </li><li> 
    T. V. Raman 
    , IBM 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
  </li>
  <li>
    Rob McDougall 
    , JetForm Corporation 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li> 
    Alex Hopmann 
    , Microsoft 
  </li> 
  <li>Dave Hyatt
    , Netscape/AOL
  </li>
  <li> 
    Eric Pollmann 
    , Netscape/AOL 
  </li>
  <li>
    Tom Butcher
    , OpenDesign
  </li> 
  <li> 
    K. P. Lee 
    , Phillips 
  </li> 
  <li> 
    Roli Wendorf 
    , Phillips 
  </li> 
  <li> 
    Ted Wugofski 
    , Openwave 
  </li> 
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li> 
  <li> 
    Dave Manning 
    , PureEdge 
  </li>
  <li>
    Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li> 
    Zoe Lacroix 
    , SurroMed, Inc. 
  </li>
  <li>
    Masayasu Ishikawa
    , W3C
  </li> 
  <li>
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>

<p>The XForms Working Group has benefited in its work from the
        participation and contributions of Invited Experts:</p> 
<ul> 
  <li> 
    Tom Schnetlage 
    , University of Berkeley 
  </li> 
  <li> 
    Dan Gillman 
    , Federal Bureau of Labor Statistics 
  </li> 
  <li> 
    Eliot Christian 
    , U.S. Geological Survey 
  </li>
  <li>
    Mikko Honkala
    , Helsinki University Of Technology
  </li>
</ul>

<div class="note"><p class="prefix"><b>Note:</b></p><p><em>Additional Acknowledgments</em>: The editors would like to thank Kai Scheppe, Malte 
  Wedel and G&ouml;tz Bock for lots of constructive criticism on early versions 
  of the chapter <a href="#"><b>???</b></a> and their contributions to its present content.</p></div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="changes"></a>A Changes from Previous Release (Non-Normative)</h2>
 
  <div class="div2"> 
    
<h3><a name="changes-overall"></a>1 Changes since the 16-Feb-2001 release</h3> 
  <p>There have been significant changes to the XForms since our last public draft. In addition, we have switched over to authoring the specification using xmlspec.dtd from writing raw HTML (details at <a href="#"><b>???</b></a>). The change from hand-authored HTML to xmlspec has introduced changes throughout the document, and consequently, adding diff marks for each change would be excessively distracting and make this appendix difficult to read. Instead, this section summarizes how things have changed so that readers familiar with the previous draft can get up to to speed with the new specification.</p></div> 
<div class="div2">
<h3><a name="changes-about"></a>2 Changes to Chapter 1 'About XForms'</h3><p>The typographic samples have been updated to work better with the XMLspec publishing system.</p></div><div class="div2">
<h3><a name="changes-concepts"></a>3 Changes to Chapter 2 'Concepts'</h3><p>This chapter has been completely updated. The new version contains a samples of complete forms and a step-by-step guide through the most common functionality in XForms.</p></div><div class="div2">
<h3><a name="changes-terms"></a>4 Changes to Chapter 3 'Terminology'</h3><p>Terms have been cleaned-up and brought into line with the rest of the document. The term "datatype" has been imported from XML Schema. The terms "computed expression", "containing document", and "model item property" are new.</p></div><div class="div2">
<h3><a name="changes-datatypes"></a>5 Changes to Chapter 4 'Datatypes'</h3><p>The Working Group has decided to more directly reference XML Schema datatypes, hence this chapter has been restructured to include by reference Schema datatypes, and define any additional types. Remaining issues are listed within the chapter.</p></div><div class="div2">
<h3><a name="changes-model"></a>6 Changes to Chapter 5 'XForms Model'</h3><p>Removed all "simple syntax". Clarified how computed model item properties (including calculate) work. Improved terminology, consistently using terms from chapter 3.</p><p>Open and closed enumerations are now under separate headings. Removed 'group' to UI chapter. Renamed "Arrays" section to "Multiple Simultaneous Values", and added section "Repeating Line Items". Renamed "Switch" to "Alternate Representation", with a pointer to the UI section.</p><p>Significant changes to this chapter, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-expr"></a>7 Changes to Chapter 6 'XPath Expressions in XForms'</h3><p>This chapter was previously named "Dynamic Constraint Language". The new title more accurately describes both the chapter and the role of XPath within XForms. The term "Dynamic Constraints Language" has been removed throughout the remainder of the document as well.</p><p>New introductory material describes the various ways XPath is used throughout XForms. The "Instance Data" section formerly residing in the Processing Model chapter is now in this chapter. The section on Datatypes now describes which parts of XForms use XPath datatypes and which use XML Schema datatypes.</p><p>The BNF productions have been removed, in favor of stronger wording that XPath is to be used directly.</p><p>The section "Evaluation Context" has been more thoroughly cross-checked against the XPath specification, with several underspecified areas now addressed.</p><p>The large set of custom operators has been replaced with a NOTE referencing the built-in XPath operators.</p><p>New functions defined--<code>count-non-empty(node-set)</code>, and <code>xforms-property(string)</code>.</p><p>Several of the functions have been specified in greater detail.</p><p>The extensibility section now makes a reference to a possible direction--the <code>element-available()</code> and <code>function-available()</code> functions.</p></div><div class="div2">
<h3><a name="changes-controls"></a>8 Changes to Chapter 7 'Form Controls'</h3><p>Originally part of the chapter "XForms User Interface". Now split into a separate chapter. The material in this new chapter has been restructured for readability.</p><p>The "Design Input" section has been removed. Further details are available in the XForms Requirements document.</p><p> 

 

Note that names of form controls have changed, but are  not yet cast in stone. The following changes and additions have been made to the core form controls:

</p><blockquote><p>hidden has been removed as a form control<br>output, textbox, submit, and reset  have kept their same names<br>exclusiveSelect and multipleSelect have been renamed selectOne and selectMany<br>checkbox is now selectBoolean<br>password is now secret<br>button has been fleshed out, including event listener details<br>uploadMedia and range are new form controls in this Working Draft</p></blockquote><p>The "AnyControl" is now described in prose instead of formally. In addition, there are minimal changes to the common elements and attributes defined in this section. Element onevent is now taken from the XHTML Events module and is therefore no longer defined in detail in this specification. A later section defines XForms-specific event handlers for use within event listeners declared via element onevent.</p></div><div class="div2">
<h3><a name="changes-ui"></a>9 Changes to Chapter 8 'XForms User Interface'</h3><p>The section "Future Work" has been removed.</p><p>The specification now  introduces constructs for authoring conditional user interfaces (see switch) and a construct for authoring repeating widgets (see repeat) for use in creating purchase orders or shopping carts that wish to create the user interface needed for populating repeating rows from a table.</p><p>Conditional User Interfaces: 
This is a new section, and defines construct switch along with its associated event handlers.</p><p>New Construct repeat:
There is a new section that defines construct repeat for authoring things like shopping carts where the user interface for populating a structure needs to be repeated multiple times.</p><p>UI  Templates: 
Constructs for creating and using user interface templates have been renamed for consistency. The new element names are uiTemplate and useUITemplate.</p><p>Constructing High-level User Interfaces:
The content pertaining to creating higher-level user interfaces from the basic building blocks has been substantially reorganized. This portion of the specification first defines construct group used to group user interface controls. Element group no longer defines an XForms-specific layout model; instead all layout attributes come from CSS. This enables XForms user interfaces to be laid out using either CSS or XSL:FO, or for that matter languages such as SVG.</p><p> 

Subforms And Subpages:
With the XForms constructs for authoring higher level user interaction now fleshed out, it turns out that there is no need for an XForms-specific subform or subpage construct --we can leverage existing mechanisms such as group and more generally, XHTML's div elements for this purpose.</p></div><div class="div2">
<h3><a name="changes-binding"></a>10 Changes to Chapter 9 'Binding'</h3><p>Some of the text has been cleaned up with regard to the relationship with XPath, but otherwise no significant content changes.</p></div><div class="div2">
<h3><a name="changes-structure"></a>11 Changes to Chapter 10 'Document Structure'</h3><p>This chapter was previously named "Using XForms with Other Document Types". Added new section "Integration with XLink". Updated examples to reflect xlink namespace. </p></div><div class="div2">
<h3><a name="changes-rpm"></a>12 Changes to Chapter 11 'Processing Model and Conformance'</h3><p>Cleaned up terminology and brought into greater consistency with the rest of the document.</p><p>Removed the <code>locale</code> property; separated the rest into those that can vary from one <code>xform</code> element to the next, and those that are the same across the containing document. Renamed <code>use-nulls</code> to <code>use-nil</code>.</p><p>The "suspend" functionality has been removed, including the <code>xforms-suspend</code> event, and will appear in a post-1.0 version of XForms. The <code>xforms-resume</code> event has been renamed <code>xforms-initialize</code>. Clarified that model items are associated with only a single value.</p><p>The "instance data" section has moved to the XPath Expressions chapter, though rules for constructing instance data are still in this chapter, and reworded for clarity.</p><p>The multipart/form-data section has been replaced with a reference to RFC 2388.</p><p>An early  conformance section has been added.</p></div><div class="div2">
<h3><a name="changes-schema"></a>13 Changes to Appendix  'Schema for XForms'</h3><p>For this release, the Schema only covers the XForms form controls and the Document Structure markup.</p><p>Significant changes to this appendix, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-xslt"></a>14 Changes to Appendix 'XSLT from Simple Syntax'</h3><p>Following the Working Group decision to remove the simple syntax, this appendix has also been removed.</p></div><div class="div2">
<h3><a name="changes-samples"></a>15 Change to Appendix 'Sample Forms'</h3><p>Sample forms have been incorporated into <a href="#"><b>???</b></a></p></div><div class="div2">
<h3><a name="changes-optional"></a>16 Changes to Appendix 'Optional Function Library'</h3><p>The Working Group has decided to remove all optional functions from XForms.</p></div><div class="div2">
<h3><a name="changes-references"></a>17 Changes to Appendix 'References'</h3><p>References have been updated to refer to the changes in document status, most notably the XML Schema recommendation. New normative reference to XLink, RFC2388; informative reference to T. V. Raman's book on auditory user interfaces. Removed orphaned references to ISO 8601, RFC 2369, RFC 2141 and moved  the orphaned Unicode reference to the informative section.</p></div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="controls"></a>1 Form Controls</h2>
  <div class="div2">
    
<h3><a name="ui-intro"></a>1.1 Introduction</h3>
    
    <p>
      XForms User Interface controls, also called <a title="" href="#">form control</a>s, are declared using
      markup elements, and their behavior refined via
      markup attributes. This markup may be further
      decorated with style properties that can be set
      using CSS stylesheets to deliver a customized look
      and feel. Form controls defined
      here are bound to the underlying instance data
      using the <a title="" href="#">binding</a> attributes as defined in the
      chapter <a href="#"><b>???</b></a>.</p>

    
    <p>
      The XForms form controls enable
      accessibility by taking a uniform approach to such
      features as captions, help text, tabbing and keyboard
      shortcuts.  Internationalization issues are being
      addressed in conjunction with the Internationalization
      Working Group and are addressed by following the same
      design principles as within the rest of XHTML. All form controls defined here are suitable for implementation as Aural CSS (ACSS) form controls.</p>

    <p>
        Several XForms form controls are of a general class that represent the concept of
        selecting from available choices.  Such selection
        controls can be characterized along a presentational
        dimension that is completely orthogonal to the
        functional distinction.  Distinguishing the
        <em>presentational</em> from the
        <em>functional</em> dimension allows the
        expression of the <em>meaning</em> of a
        particular form control--see <a href="#">[aui-conversational-gestures]</a> for a definition
        of such high-level  user interaction primitives.</p>
      

      <p>This chapter includes non-normative graphical
      examples of many form controls.
      The CSS Working Group is providing assistance with creating
      default CSS rules for producing visual renderings 
      of standard XForms form controls. This
      specification will also include non-normative rules for
      how these same controls might be rendered to alternative
      access modalities.</p><div class="issue"><p class="prefix"><a name="control-names"></a><b>Issue (control-names):</b></p>
      <p>All form control names listed here should be considered advisory until further consensus is reached in the Working Group.</p>
    </div><p>For each form control, the following aspects will be defined:</p>

  <blockquote><p>Description<br>Examples<br>Data Binding Restrictions<br>Implementation Hints<br>XML Representation</p></blockquote><p>The form controls defined here use common attributes and elements that are defined later in this chapter (<a href="#"><b>???</b></a>).</p></div>
  
  <div class="div2">
<h3><a name="ui-entry"></a>1.2 textbox</h3><p>Description: This form control enables free-form data entry.</p><p>Examples:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox ref="order/shipTo/street" style="width:xx; height:xx"&gt;
 &lt;caption&gt;Street&lt;caption&gt;
 &lt;help&gt;Please enter the number and street name&lt;/help&gt;
&lt;/textbox&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes <code>height</code>
        and <code>width</code>
        specify the display size of the form control. Note
        that the constraints on how much text can be input are
        obtained from the underlying XForms Model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render the above example as follows:</p>

      <p><img src="images/ui-textbox.png" alt="an average-looking text entry field. The title, 'street' has been automatically aligned to the left"></p>
    <p>Data Binding Restrictions: The entered value of the form control (after processing as described in <a href="#"><b>???</b></a>) is treated as a lexical value. A datatype bound to this form control will be treated as a restriction upon the allowed entered value.</p><p>Implementation Hints: Implementations may represent this form control with more than one native user interface control, for example a form control that appears to be three separate smaller entry fields for "day", "month", and "year" for a date datatype. Further, for date datatypes, a calendar system for data entry may be used, including non-Gregorian calendar systems. For numeric datatypes, additional features might include spin buttons or other conveniences. When bound to a datatype that accepts newline characters, this form control should accept multi-line input.</p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>textbox</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/textbox&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes</b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  <div class="div2">
<h3><a name="ui-secret"></a>1.3 secret</h3><p>Description: This form control is used for obtaining   information that is considered sensitive, and thus  not echoed
        to a visual or aural display as it is being entered, e.g., password entry.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret ref="/login/password" style="width:xx; height:xx"&gt;
  &lt;caption&gt;Please enter your password --it will not be visible as you type.&lt;caption&gt;
&lt;/secret&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes
        <code>height</code> and <code>width</code> specify
        the display size of the form control. Note that
        the constraints on how much text can be input are
        obtained from the underlying XForms model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render this form control
        as follows:</p>

      <p><img src="images/ui-password.png" alt="an                   average-looking text entry field, with '*'                   characters where the text would be                   expected"></p>
      <p>Data Binding Restrictions: Identical to <code>textbox</code>.</p><p>Implementation Hints: In general,  implementations, including accessibility aids, would render a "*" or similar character instead of  the actual characters entered, and thus would  not render the entered value of this form control. Note that this provides only a casual level of security; truly sensitive information will require additional security measures outside the scope of XForms.</p><div class="example">
<h5>Example: XML Representation
          &lt;<code>secret</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/secret&gt;</pre></td></tr></table>
        <blockquote><p>

          <b>common attributes</b> defined 
            in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-uploadMedia"></a>1.4 uploadMedia</h3><p>Description: This form control enables the common feature of Web sites to upload a file from the local file system, as well as accepting input from various devices including microphones, pens, and digital cameras.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia ref="mail/attach1" mediaType="image/*"&gt;
  &lt;caption&gt;Select image:&lt;/caption&gt;
&lt;/upload&gt;</pre></td></tr></table>
      
      

      
      <p>A graphical browser might render this form control as follows:</p>

      <p><img src="images/ui-upload.png" alt="A drop-down box; main display reads 'Select Image:' with a cutesey icon. The drop-down                   itself has three items: (icon)-From Scanner or Camera...; (icon)-Scribble...; Browse..."></p>
      <p>Data Binding Restrictions:  This form control can only be bound to datatypes <code>xsd:base64Binary</code> or <code>xsd:hexBinary</code>, or types derived by restriction from these.</p><p>Implementation Hints:</p><ul>
        <li>
          <p>Implementations with a file system SHOULD support "file upload"--selecting a specific file, for all mediaTypes. The types of files presented
            by default MUST reflect the mediaType specified in the XForms Model, for
            example defaulting to only audio file types in the file dialog when the
            mediaType is "audio/*". In XForms 1.0, there is a 1:1 binding between a
            uploadMedia form control and one of the <code>xform:binary</code> datatypes, although that
            single file may be compound (e.g. application/zip).</p>
        </li>
        <li>
          <p>Implementations with specific pen/digitizer hardware SHOULD (and
            implementations with other pointing devices MAY) support "scribble"--allowing in-place creation of pen-based PNG image data, when the mediaType
            is "image/*" or "image/png". Other mediaTypes besides image/png MAY share this
            input method.</p>
        <div class="note"><p class="prefix"><b>Note:</b></p><p>Commonly, people have trouble drawing recognizable figures or
                signatures with a conventional pointing device like a mouse or track ball.
                Hence, a reasonable implementation of XForms might not want this feature, hence the
                "MAY" here for generic pointing
                devices</p></div></li>
        <li>
          <p>Implementations with specific audio recording capabilities SHOULD support
            <em>record</em>--in-place recording of an audio clip, when the mediaType is
            "audio/*" or "audio/basic". Other mediaTypes besides "audio/basic" MAY share this
            input method.</p>
        </li>
        <li>
          <p>Implementations with a digital camera/scanner interface SHOULD support
            <em>send image</em>--in-place upload of images from an attached device, when the
            mediaType is "image/*" or "image/jpeg". Other mediaTypes besides "image/jpg" MAY
            share this input method.</p>
        </li>
        <li>
          <p>Implementations with video recording capability SHOULD provide a "record"
            option for video/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations with 3d capabilities SHOULD provide a 3d interface option
            for model/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations MAY provide proprietary implementations (for example, a
            mediaType of text/rtf could invoke an edit window with a proprietary word
            processing application)</p>
        </li>
        <li>
          <p>Implementations are encouraged to support other input devices not
            mentioned here.</p>
        </li>
        </ul>
      
      <div class="example">
<h5>Example: XML Representation: &lt;<code>uploadMedia</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia
  (common attributes)
  mediaType = list of content types
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/uploadMedia&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a><br><b>mediaType = list of media types</b> - list of suggested media types, used by the XForms Processor to determine which input methods apply.</p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-selectOne"></a>1.5 selectOne</h3><p>Description: This form control allows the user to make a single selection from multiple choices.</p><p>Typically, a stylesheet would be used to determine
        the exact appearance of form controls, though a
        means is provided to make a concrete selection
        through an attribute.  The value of the attribute
        consists of one of the following values, each of
        which may have a platform-specific behavior:</p>

      <blockquote><p>
         radioGroup
        <br>checkboxGroup
        <br>pulldown
        <br>listbox 
        <br>comboGroup
      </p></blockquote><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="icecream/flavor"&gt;
  &lt;caption&gt;Flavor&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="vanilla"&gt;Vanilla&lt;/item&gt;
    &lt;item value="strawberry"&gt;Strawberry&lt;/item&gt;
    &lt;item value="chocolate"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;</pre></td></tr></table>

        <p>
          In the above example, selecting one of the choices will result in the associated <code>value</code>
          given by attribute <code>value</code> on the selected item being set in the underlying data instance at the location <code>icecream/flavor</code>.
          The <code>value</code>s given in the user interface shown above may be used in constructing a default schema if no schema is provided by the XForms author.
        </p>

        

        
        <p>A graphical browser might render this form control as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
            <tr><td><img src="images/ui-selectOne-listbox.png" alt="a list control, Vanilla, Strawberry, and Chocolate visible; Strawberry selected"></td><td><img src="images/ui-selectOne-checkbox.png" alt="checkboxes, Vanilla, Strawberry, Chocolate; Chocolate is selected"></td><td><img src="images/ui-selectOne-radio.png" alt="radio buttons, Vanilla, Strawberry, Chocolate; Strawberry is selected"></td><td><img src="images/ui-selectOne-pulldown.png" alt="a collapsed pull-down list; Vanilla is selected"></td></tr></tbody></table><p>Data Binding Restrictions: This form control will select the lexical value from the <code>value</code> attribute (or in the absence of such an attribute, the text content of the <code>item</code> element) of the single item selected. If the datatype bound to this form control does not permit the selected value (for instance a datatype of <code>xsd:decimal</code> with an attribute <code>value="abc"</code>), the form control with that selection will be perpetually considered invalid and it will not be possible to submit the form. Authors are encouraged to avoid this situation.</p><p>If the datatype bound to this form control includes a non-enumerated value space (for instance <code>xsd:string</code>, or <code>xsd:string</code> as part of a union), or if the "comboGroup" UI hint is specified, the form control then should allow free data entry, as described in <a href="#"><b>???</b></a>, in addition to the behavior defined here.</p><div class="issue"><p class="prefix"><a name="items-specified-elsewhere"></a><b>Issue (items-specified-elsewhere):</b></p><p>Yet to be decided is allowing display and/or storage values located elsewhere to be retrieved from a binding expression.</p></div><p>Some user interface combinations may allow a state of zero selected items, in which case the lexical value of a zero-length string is selected.</p><p>Implementation Hints: 
          User interfaces may choose to render <code>selectOne</code>
          as a pulldown list or group of radio buttons, among other options. The selectUI attribute offers a hint as to which rendering might be most appropriate, although any styling information (such as CSS) should take precedence.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>selectOne</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectOne&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>    selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance
              override
          </p></blockquote>
        </div></div>
  
  <div class="div2">
<h3><a name="ui-selectMany"></a>1.6 selectMany</h3><p>Description: This form control allows the user to make multiple selections from multiple choices.</p>
      
      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany ref="icecream/flavors"&gt;
  &lt;caption&gt;Flavors&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="v"&gt;Vanilla&lt;/item&gt;
    &lt;item value="s"&gt;Strawberry&lt;/item&gt;
    &lt;item value="c"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectMany&gt;</pre></td></tr></table><p>In the above example, more than one flavor can be
          selected, populating the instance data with multiple selections.</p>

        

        
        <p>A graphical browser might render form control
          <code>selectMany </code>as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
              <tr><td><img src="images/ui-selectMany-listbox.png" alt="list-box; Vanilla, Strawberry, and                                Chocolate visible; Strawberry and Chocolate                                selected"></td><td><img src="images/ui-selectMany-checkbox.png" alt="checkboxes, Vanilla, Strawberry, and                                                             Chocolate; Strawberry and Chocolate                                                             selected"></td><td><img src="images/ui-selectMany-radio.png" alt="Radio buttons, Vanilla, Strawberry, and                                                                                          Chocolate; Strawberry and Chocolate                                                                                          selected"></td><td>N/A</td></tr></tbody></table>
        <p>Data Binding Restrictions: When zero or one items are selected, this form control behaves exactly like <code>selectOne</code> with regard to the lexical value that is selected. When multiple items are selected, the lexical value is a space-separated list of the selected values. The datatype bound to this form control must be capable of supporting this format, typically a Schema list type. Cases where each of the multiple selections appear in the instance data attached to a separate element are handled through the <code>repeat</code> construction (<a href="#"><b>???</b></a>).</p><div class="note"><p class="prefix"><b>Note:</b></p><p>A limitation of the Schema list datatypes is that whitespace characters in the storage values (the <code>value="..."</code> attribute of the <code>item</code> element) are always interpreted as separators between individual data values. Therefore, authors should avoid using whitespace characters within storage values.</p><p>For instance, the following incorrect item declaration:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item value="United States of America"&gt;USA&lt;/item&gt;</pre></td></tr></table><p>when selected, would introduce not one but four additional selection values: "America", "of", "States", and "United".</p></div><p>Implementation Hints: An accessibility aid might allow the user to browse
          through the available choices  and leverage
          the grouping of choices in the markup to
          provide enhanced navigation through long lists
          of choices.</p><div class="example">
          
<h5>Example: XML Representation: &lt;<code>selectMany</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectMany&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance override</p></blockquote>
        </div></div><div class="div2">
<h3><a name="ui-selectBool"></a>1.7 selectBoolean</h3><p>Description: This form control represents an on/off or true/false or yes/no (or similar) choice.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean ref="questionnaire/married"&gt;
  &lt;caption&gt;Are you married?&lt;/caption&gt;
  &lt;help&gt;We need this to determine your tax allowance&lt;/help&gt;
  &lt;choices&gt;
    &lt;item value="true"&gt;Yes&lt;/item&gt;
    &lt;item value="false"&gt;No&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table><p>Data Binding Restrictions: This form control produces only two possible lexical values: <code>true</code> or <code>false</code>. To be considered valid, the datatype bound to this form control (typically <code>xform:boolean</code>) must be able to accept these two lexical values.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Scenarios where the desired lexical value is anything other than 'true'/'false' are not suitable for the <code>selectBoolean</code> form control.</p><p>For example, if the values placed into the instance data were required to be either "male" or "female", the <code>selectOne</code> form control should be used instead.</p></div><p>Implementation Hints: Visual implementations would typically render this as a checkbox. In some cases, like the above example or in aural environments, it may be helpful to provide labels for the respective choices. This is accomplished through the <code>choices</code> mechanism, similar to the other <code>select...</code> form controls.</p><div class="example">
<h5>Example: XML Representation:
            &lt;<code>selectBoolean</code>&gt;</h5> <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean
  (common attributes )
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>selectUI = (TBD)</b></p></blockquote>
        </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-range"></a>1.8 range</h3><p>Description: This form control allows selection from a continuous range of values.</p>

      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range ref="/stats/balance" start="-2.0" end="2.0" stepSize="0.5"&gt;
  &lt;caption&gt;Balance:&lt;/caption&gt;
&lt;/range&gt;</pre></td></tr></table><p>A graphical browser might render this as follows:</p>
  <p><img src="images/ui-range.png" alt="a slider control, from -2 to +2"></p>
  <p>Data Binding Restrictions: Only datatypes  which represent a continuous range where
   it is possible to express a difference value can be bound to this form control.
   (For instance, <code>xform:decimal</code> would be fine, while <code> xform:string</code>
   or <code>xform:..Binary</code> would not). In terms of Schema datatypes, the datatype must
   be either 1) have a total order relationship, or 2) an overall partial order relationship,
   but totally ordered within the range specified between the <code>start</code> and <code>end</code>
   attributes. </p>
   <div class="issue"><p class="prefix"><a name="enum-range"></a><b>Issue (enum-range):</b></p><p>Should an enumeration be allowed to bind to this form control?
   If yes, how should it be ordered?</p></div>
   
   <p>Implementation Hints: In graphical environments, this form control would typically be
   rendered as a "slider" or "volume control".</p><p>Notice that the attributes
   of this element encapsulate sufficient metadata that in
        conjunction with the type information 
        available from the XForms Model proves sufficient to produce
        meaningful prompts when using modalities like speech,
        e.g., when using an accessibility aid.
        Thus, an Aural CSS enabled user agent might speak a prompt of the
        form 
        <em>Please pick a date in the range January 1, 2001 through
          December 31, 2001.</em>
      </p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>range</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range
  (common attributes)
  start = datavalue
  end = datavalue
  stepSize = datavalue-difference
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/range&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>start = datavalue</b> - 
            Lexical starting bound for the range, of the
            same datatype bound to the form control
          <br><b>end = datavalue</b> - Lexical ending bound for the range, of the same datatype bound to the form control<br><b>stepSize = datatype-difference</b> - Prefered step-size to use  for incrementing or
            decrementing the value within the form
            control, of a datatype that can express the difference between two values of the datatype bound to the form control</p></blockquote>
      </div>

      
      
      </div><div class="div2">
<h3><a name="ui-button"></a>1.9 button</h3><p>Description: This form control is similar to the XHTML
        element of the same name and allows for
        user-triggered actions. This form control may also be used to
        advantage in realizing other custom form controls.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button&gt;
Example unavailable at time of publication
&lt;/button&gt;</pre></td></tr></table><p>Data Binding Restrictions:</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Binding a model item has no direct effect on a button, but provides a context for any event handlers that are attached.</p></div><p>Implementation Hints: Graphical implementations would typically render this form control as a push-button.</p>

      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>button</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/button&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-output"></a>1.10 output</h3><p>Description: This form control renders a value from the instance data, but provides no means for entering or changing data. 
        This form control may be used in a <code>caption</code>,
        for instance,  when authors want to say: "I charged you <em>value</em> - and here is 
          why.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>I charged you
&lt;output ref="order/totalPrice"/&gt;
and here is why:</pre></td></tr></table>
      

      
      <p>A graphical browser might render an output form control as follows:</p>

      <p><img src="images/ui-output.png" alt="average-looking text, reading 'I charged you                   100.0 - and here is why:'"></p>
      <p>Data Binding Restrictions: The lexical value of the datatype bound to this form control is displayed, after processing as described in <a href="#"><b>???</b></a>.</p><p>Implementation Hints: An audio browser might apply  properties to this form control to
        <em>aurally highlight</em>
        the displayed value to provide audio formatted output.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>output</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;output
 id = xsd:ID
 ref = binding-expression
 xform = instance data selector
 format = formatting-expression
&gt;
  &lt;!-- empty content --&gt;
&lt;/output&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>id = xsd:ID</b> - Optional unique identifier used for linking.<br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a><br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.<br><b>format = formatting-expression</b> - Optional format specifier</p></blockquote>
      </div><table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">We need to decide on how we define attribute
          <code>format</code> on form control
          <code>output</code>.
          The functionality needed is similar to what
          functions like <code>printf</code> typically
          take.</td></tr></table></div><div class="div2">
<h3><a name="ui-submit"></a>1.11 submit</h3><p>Description: This form control submits all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit xform="timecard"&gt;
  &lt;caption&gt;Submit&lt;/caption&gt;
&lt;/submit&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>submit()</code> method.</p><div class="example">
<h5>Example: XML
          Representation: &lt;<code>submit</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/submit&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-reset"></a>1.12 reset</h3><p>Description: This form control resets to the initial values all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset ref="/tcard/data" xform="timecard"&gt;
  &lt;caption&gt;Reset totals&lt;/caption&gt;
&lt;/reset&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>reset()</code> method.</p><div class="example">
        
<h5>Example: XML Representation:
          &lt;<code>reset</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/reset&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  
  
<div class="div2">
    
<h3><a name="ui-common"></a>1.13 Common Markup</h3>
    
    <p>
      The preceding form control definitions make reference to several child elements and attributes that are common to several of the XForms form controls. This section defines these common markup components.</p>

    <div class="div3">
      
<h4><a name="ui-common-attributes"></a>1.13.1 Common Attributes</h4>
      <div class="issue"><p class="prefix"><a name="XHTML-attrs"></a><b>Issue (XHTML-attrs):</b></p><p>XHTML defines two attributes on element
          <code>html:form</code>--<code>accept</code>
          and <code>accept-charset</code>. Additionally, attribute
          <code>accept-charset</code> also appears on element
          <code>html:input</code>.
          We need to bring the equivalent to these into the XForms specification.</p></div>
      <div class="example">
        
<h5>Example: XML Representation: Common Attributes</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>xmlns = xsd:anyURI
xml:lang = xsd:language
id = xsd:ID
class = space separated list of classes
style = associated style info
ref = binding-expression
xform = xsd:IDREF
navIndex = xsd:nonNegativeInteger : 0
accessKey = xsd:token</pre></td></tr></table>
        <blockquote><p> 
          <b>xmlns = xsd:anyURI</b> - Optional standard XML attribute for identifying an XML namespace.
          <br><b>xml:lang = xsd:language</b> - Optional standard XML attribute to specify a human language for this element.
          <br><b>id = xsd:ID</b> - Optional unique identifier used for linking.
          <br><b>class = space separated list of classes</b> - Optional selector for a style rule.
          <br><b>style = associated style info</b> - Optional inline style specification.
          <br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a>. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>navIndex = xsd:nonNegativeInteger : 0</b> - Optional attribute is a non-negative integer in the range of 0-32767 used 
            to define the navigation sequence. This gives the author control over the 
            sequence in which <a title="" href="#">form control</a>s 
            are traversed. The default navigation order is specified in the chapter <a href="#"><b>???</b></a>.<br><b> accessKey = xsd:string</b> - Optional attribute defines a shortcut for moving the input focus directly 
            to a particular <a title="" href="#">form control</a>. 
            The value of this is typically a single character which when pressed together 
            with a platform specific modifier key (e.g. the <em>alt</em> key) results 
            in the focus being set to this <a title="" href="#">form 
              control</a>.
          
        </p></blockquote>
      </div>
      
      <p>
        CSS properties for controlling the look and feel of
        XForms form controls are being defined in
        conjunction with the CSS Working Group.  This version
        of the XForms working draft defines the XForms form controls independent of visual
        presentation. Additionally, sample default
        visual presentations are shown for each form control
        defined in this Working Draft.  The CSS Working Group
        has agreed to help us develop a default CSS stylesheet
        capable of producing the sample default renderings
        illustrated in this working draft.  The results of the
        above will be used to document the use of CSS
        properties within XForms user interface elements for
        the final version of the XForms specification.</p>

      
    </div>
    <div class="div3">
      
<h4><a name="ui-common-elements"></a>1.13.2 Common Child Elements</h4>
      
      <p>
        Child elements <code>caption</code>, <code>help</code> and
        <code>hint</code> detailed below provide the ability to attach human-readable
        metadata to XForms form controls.
      </p>

      
      <p>Instead of supplying such metadata e.g., the label
        for a form control, as inline content of
        the contained element <code>caption</code>, the metadata can be
        pointed to by using a simple XLink attribute
        <code>xlink:href</code> on element <code>caption</code> (or <code>hint</code> or <code>help</code>).
        Notice that systematic use of this feature can be
        exploited in internationalizing XForms user interfaces
        by:
        
      </p>

      <ul><li><p>Factoring all human readable
            messages to a separate
            resource XML file.</p></li><li><p>Using URIs into this XML resource
            bundle within individual caption
            elements</p></li><li><p>Finally, an XForms
            processor can use content negotiation to obtain the
            appropriate XML resource bundle,
            e.g., based on the <code>accept-language</code>
            headers from the client, to serve up the user
            interface with messages localized to the
            client's locale.</p></li></ul><div class="div4">
        
<h5><a name="ui-common-elements-caption"></a>1.13.2.1 caption</h5>
        
        <p>The required element <code>caption</code>  labels the containing form control with
          a descriptive label. Additionally, the caption makes it possible
          for someone who can't see the form control to
          obtain a short description while navigating
          between form controls.</p>


        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>caption</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;caption
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/caption&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes</b> defined in
              <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        <p>An accessibility aid would typically speak the metadata
          encapsulated in element <code>caption</code> when the
          containing form control gets focus.</p>
      </div>
      <div class="div4">
        
<h5><a name="ui-common-elements-help"></a>1.13.2.2 help</h5>
        
        <p>
          The optional element <code>help</code> provides a longer
          description that will help users  understand how
          to fill out this <a title="" href="#">form control</a>.
          The <code>help</code> text will   be shown only
          on request.</p>

        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>help</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;help
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/help&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        
        <p>A graphical browser might render help as follows:</p>

        <p><img src="images/ui-password-with-help.png" alt="a                     password entry field, with a popup window below,                     displaying instructions for retrieving a forgotton                     password"></p><p>An accessibility aid might speak this
          information upon request.</p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-hint"></a>1.13.2.3 hint</h5>
        
        <p>
          The optional element <code>hint</code> provides a short
          hint for the user, typically represented as a
          tooltip by graphical user agents.  The tooltip
          text will normally be shown when the user remains
          on the form control for more than a certain length
          of time.  Accessibility aids might render such
          tooltips using speech. This element is optional,
          and its content model is mixed.</p>

        <div class="example">
          
<h5>Example: XML Representation:
            &lt;<code>hint</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;hint
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/hint&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
        </div>

        
        <p>A graphical browser might render hints as follows:</p>

        <p><img src="images/ui-textbox-with-hint.png" alt="an average-looking text entry field, with a mouse pointer visible and a tooltip below, reading 'Please enter the number and street name'"></p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-onevent"></a>1.13.2.4 onevent</h5>
        
        <p>
          This element can be used to bind event handlers to
          form controls. It is defined in <a href="#">[ref-xhtml-events]</a>. Details on XForms events
          can be found in the chapter
          <a href="#"><b>???</b></a>.</p>

        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>onevent</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;onevent
  (attributes defined in XHTML Events)
&gt;
  &lt;!-- Action handlers --&gt;
&lt;/onevent&gt;</pre></td></tr></table>
        </div>
        <p>
          Element <code>onevent</code> is defined in the XHTML Events
          module.
          It declares   an event listener 
          by specifying the event  to handle  and the event handler to
          invoke.</p>
      </div>
      
    <div class="div4">
<h5><a name="ui-common-elements-item"></a>1.13.2.5 item</h5>

        <p>This element is used within list form controls to represent a single item of the list.</p>
        <div class="issue"><p class="prefix"><a name="onevent-for-item"></a><b>Issue (onevent-for-item):</b></p><p>Should onevent handlers be allowed here for individual items in a list?</p></div><div class="example">
<h5>Example: XML Representation: &lt;<code>item</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item
  value = lexical-representation
&gt;
  &lt;!-- #PCDATA --&gt;
&lt;/item&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>value = lexical-representation</b> - the "storage value" for the item, to be placed in the instance data when this item is chosen.</p></blockquote>
        </div>
      </div><div class="div4">
<h5><a name="ui-common-elements-choices"></a>1.13.2.6 choices</h5>
        <p>This element is used within list form controls to group items. This provides the same functionality as element <code>optgroup</code> in HTML 4.0.</p>
        <div class="example">
<h5>Example: XML Representation: &lt;<code>choices</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;choices&gt;
  &lt;!-- (item | choices)+ --&gt;
&lt;/choices&gt;</pre></td></tr></table>
          
        </div>
      </div></div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="acks"></a>A Acknowledgements (Non-Normative)</h2> 
<p>The Authors of this document are:</p>
<ul>
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Micah Dubinko 
    , Cardiff 
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li>
  <li> 
    Roland Merrick 
    , IBM 
  </li>
  <li> 
    T. V. Raman 
    , IBM 
  </li>
  <li>
    Linda Bucksay Welsh
    , Intel
     (<i>Until April 2001</i>) 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
    </li>
    <li>
      Rob McDougall 
      , JetForm Corporation 
    </li>
  <li>
    John McCarthy
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Frank Olken
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li>Panagiotis Reveliotis
    , Phillips
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li><li>Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li>
    Dave Raggett
    , W3C/OpenWave
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>
  
  <p>This document was written with the participation of the XForms Working
        Group, which currently consists of the following members:</p> 
<ul> 
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li><li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li><li> 
    Micah Dubinko 
    , Cardiff 
  </li> 
  <li>
    Driss Eddaifi
    , Ecole Mohammadia d'Ing&eacute;nieurs
  </li>
  <li>
    Michalis Petropoulos
    , Enosys Markets, Inc.
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li> 
  <li> 
    Frank Boumphrey 
    , HTML Writer's Guild 
  </li> 
  <li> 
    Roland Merrick 
    , IBM 
  </li><li> 
    T. V. Raman 
    , IBM 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
  </li>
  <li>
    Rob McDougall 
    , JetForm Corporation 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li> 
    Alex Hopmann 
    , Microsoft 
  </li> 
  <li>Dave Hyatt
    , Netscape/AOL
  </li>
  <li> 
    Eric Pollmann 
    , Netscape/AOL 
  </li>
  <li>
    Tom Butcher
    , OpenDesign
  </li> 
  <li> 
    K. P. Lee 
    , Phillips 
  </li> 
  <li> 
    Roli Wendorf 
    , Phillips 
  </li> 
  <li> 
    Ted Wugofski 
    , Openwave 
  </li> 
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li> 
  <li> 
    Dave Manning 
    , PureEdge 
  </li>
  <li>
    Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li> 
    Zoe Lacroix 
    , SurroMed, Inc. 
  </li>
  <li>
    Masayasu Ishikawa
    , W3C
  </li> 
  <li>
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>

<p>The XForms Working Group has benefited in its work from the
        participation and contributions of Invited Experts:</p> 
<ul> 
  <li> 
    Tom Schnetlage 
    , University of Berkeley 
  </li> 
  <li> 
    Dan Gillman 
    , Federal Bureau of Labor Statistics 
  </li> 
  <li> 
    Eliot Christian 
    , U.S. Geological Survey 
  </li>
  <li>
    Mikko Honkala
    , Helsinki University Of Technology
  </li>
</ul>

<div class="note"><p class="prefix"><b>Note:</b></p><p><em>Additional Acknowledgments</em>: The editors would like to thank Kai Scheppe, Malte 
  Wedel and G&ouml;tz Bock for lots of constructive criticism on early versions 
  of the chapter <a href="#"><b>???</b></a> and their contributions to its present content.</p></div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="changes"></a>A Changes from Previous Release (Non-Normative)</h2>
 
  <div class="div2"> 
    
<h3><a name="changes-overall"></a>1 Changes since the 16-Feb-2001 release</h3> 
  <p>There have been significant changes to the XForms since our last public draft. In addition, we have switched over to authoring the specification using xmlspec.dtd from writing raw HTML (details at <a href="#"><b>???</b></a>). The change from hand-authored HTML to xmlspec has introduced changes throughout the document, and consequently, adding diff marks for each change would be excessively distracting and make this appendix difficult to read. Instead, this section summarizes how things have changed so that readers familiar with the previous draft can get up to to speed with the new specification.</p></div> 
<div class="div2">
<h3><a name="changes-about"></a>2 Changes to Chapter 1 'About XForms'</h3><p>The typographic samples have been updated to work better with the XMLspec publishing system.</p></div><div class="div2">
<h3><a name="changes-concepts"></a>3 Changes to Chapter 2 'Concepts'</h3><p>This chapter has been completely updated. The new version contains a samples of complete forms and a step-by-step guide through the most common functionality in XForms.</p></div><div class="div2">
<h3><a name="changes-terms"></a>4 Changes to Chapter 3 'Terminology'</h3><p>Terms have been cleaned-up and brought into line with the rest of the document. The term "datatype" has been imported from XML Schema. The terms "computed expression", "containing document", and "model item property" are new.</p></div><div class="div2">
<h3><a name="changes-datatypes"></a>5 Changes to Chapter 4 'Datatypes'</h3><p>The Working Group has decided to more directly reference XML Schema datatypes, hence this chapter has been restructured to include by reference Schema datatypes, and define any additional types. Remaining issues are listed within the chapter.</p></div><div class="div2">
<h3><a name="changes-model"></a>6 Changes to Chapter 5 'XForms Model'</h3><p>Removed all "simple syntax". Clarified how computed model item properties (including calculate) work. Improved terminology, consistently using terms from chapter 3.</p><p>Open and closed enumerations are now under separate headings. Removed 'group' to UI chapter. Renamed "Arrays" section to "Multiple Simultaneous Values", and added section "Repeating Line Items". Renamed "Switch" to "Alternate Representation", with a pointer to the UI section.</p><p>Significant changes to this chapter, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-expr"></a>7 Changes to Chapter 6 'XPath Expressions in XForms'</h3><p>This chapter was previously named "Dynamic Constraint Language". The new title more accurately describes both the chapter and the role of XPath within XForms. The term "Dynamic Constraints Language" has been removed throughout the remainder of the document as well.</p><p>New introductory material describes the various ways XPath is used throughout XForms. The "Instance Data" section formerly residing in the Processing Model chapter is now in this chapter. The section on Datatypes now describes which parts of XForms use XPath datatypes and which use XML Schema datatypes.</p><p>The BNF productions have been removed, in favor of stronger wording that XPath is to be used directly.</p><p>The section "Evaluation Context" has been more thoroughly cross-checked against the XPath specification, with several underspecified areas now addressed.</p><p>The large set of custom operators has been replaced with a NOTE referencing the built-in XPath operators.</p><p>New functions defined--<code>count-non-empty(node-set)</code>, and <code>xforms-property(string)</code>.</p><p>Several of the functions have been specified in greater detail.</p><p>The extensibility section now makes a reference to a possible direction--the <code>element-available()</code> and <code>function-available()</code> functions.</p></div><div class="div2">
<h3><a name="changes-controls"></a>8 Changes to Chapter 7 'Form Controls'</h3><p>Originally part of the chapter "XForms User Interface". Now split into a separate chapter. The material in this new chapter has been restructured for readability.</p><p>The "Design Input" section has been removed. Further details are available in the XForms Requirements document.</p><p> 

 

Note that names of form controls have changed, but are  not yet cast in stone. The following changes and additions have been made to the core form controls:

</p><blockquote><p>hidden has been removed as a form control<br>output, textbox, submit, and reset  have kept their same names<br>exclusiveSelect and multipleSelect have been renamed selectOne and selectMany<br>checkbox is now selectBoolean<br>password is now secret<br>button has been fleshed out, including event listener details<br>uploadMedia and range are new form controls in this Working Draft</p></blockquote><p>The "AnyControl" is now described in prose instead of formally. In addition, there are minimal changes to the common elements and attributes defined in this section. Element onevent is now taken from the XHTML Events module and is therefore no longer defined in detail in this specification. A later section defines XForms-specific event handlers for use within event listeners declared via element onevent.</p></div><div class="div2">
<h3><a name="changes-ui"></a>9 Changes to Chapter 8 'XForms User Interface'</h3><p>The section "Future Work" has been removed.</p><p>The specification now  introduces constructs for authoring conditional user interfaces (see switch) and a construct for authoring repeating widgets (see repeat) for use in creating purchase orders or shopping carts that wish to create the user interface needed for populating repeating rows from a table.</p><p>Conditional User Interfaces: 
This is a new section, and defines construct switch along with its associated event handlers.</p><p>New Construct repeat:
There is a new section that defines construct repeat for authoring things like shopping carts where the user interface for populating a structure needs to be repeated multiple times.</p><p>UI  Templates: 
Constructs for creating and using user interface templates have been renamed for consistency. The new element names are uiTemplate and useUITemplate.</p><p>Constructing High-level User Interfaces:
The content pertaining to creating higher-level user interfaces from the basic building blocks has been substantially reorganized. This portion of the specification first defines construct group used to group user interface controls. Element group no longer defines an XForms-specific layout model; instead all layout attributes come from CSS. This enables XForms user interfaces to be laid out using either CSS or XSL:FO, or for that matter languages such as SVG.</p><p> 

Subforms And Subpages:
With the XForms constructs for authoring higher level user interaction now fleshed out, it turns out that there is no need for an XForms-specific subform or subpage construct --we can leverage existing mechanisms such as group and more generally, XHTML's div elements for this purpose.</p></div><div class="div2">
<h3><a name="changes-binding"></a>10 Changes to Chapter 9 'Binding'</h3><p>Some of the text has been cleaned up with regard to the relationship with XPath, but otherwise no significant content changes.</p></div><div class="div2">
<h3><a name="changes-structure"></a>11 Changes to Chapter 10 'Document Structure'</h3><p>This chapter was previously named "Using XForms with Other Document Types". Added new section "Integration with XLink". Updated examples to reflect xlink namespace. </p></div><div class="div2">
<h3><a name="changes-rpm"></a>12 Changes to Chapter 11 'Processing Model and Conformance'</h3><p>Cleaned up terminology and brought into greater consistency with the rest of the document.</p><p>Removed the <code>locale</code> property; separated the rest into those that can vary from one <code>xform</code> element to the next, and those that are the same across the containing document. Renamed <code>use-nulls</code> to <code>use-nil</code>.</p><p>The "suspend" functionality has been removed, including the <code>xforms-suspend</code> event, and will appear in a post-1.0 version of XForms. The <code>xforms-resume</code> event has been renamed <code>xforms-initialize</code>. Clarified that model items are associated with only a single value.</p><p>The "instance data" section has moved to the XPath Expressions chapter, though rules for constructing instance data are still in this chapter, and reworded for clarity.</p><p>The multipart/form-data section has been replaced with a reference to RFC 2388.</p><p>An early  conformance section has been added.</p></div><div class="div2">
<h3><a name="changes-schema"></a>13 Changes to Appendix  'Schema for XForms'</h3><p>For this release, the Schema only covers the XForms form controls and the Document Structure markup.</p><p>Significant changes to this appendix, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-xslt"></a>14 Changes to Appendix 'XSLT from Simple Syntax'</h3><p>Following the Working Group decision to remove the simple syntax, this appendix has also been removed.</p></div><div class="div2">
<h3><a name="changes-samples"></a>15 Change to Appendix 'Sample Forms'</h3><p>Sample forms have been incorporated into <a href="#"><b>???</b></a></p></div><div class="div2">
<h3><a name="changes-optional"></a>16 Changes to Appendix 'Optional Function Library'</h3><p>The Working Group has decided to remove all optional functions from XForms.</p></div><div class="div2">
<h3><a name="changes-references"></a>17 Changes to Appendix 'References'</h3><p>References have been updated to refer to the changes in document status, most notably the XML Schema recommendation. New normative reference to XLink, RFC2388; informative reference to T. V. Raman's book on auditory user interfaces. Removed orphaned references to ISO 8601, RFC 2369, RFC 2141 and moved  the orphaned Unicode reference to the informative section.</p></div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="controls"></a>1 Form Controls</h2>
  <div class="div2">
    
<h3><a name="ui-intro"></a>1.1 Introduction</h3>
    
    <p>
      XForms User Interface controls, also called <a title="" href="#">form control</a>s, are declared using
      markup elements, and their behavior refined via
      markup attributes. This markup may be further
      decorated with style properties that can be set
      using CSS stylesheets to deliver a customized look
      and feel. Form controls defined
      here are bound to the underlying instance data
      using the <a title="" href="#">binding</a> attributes as defined in the
      chapter <a href="#"><b>???</b></a>.</p>

    
    <p>
      The XForms form controls enable
      accessibility by taking a uniform approach to such
      features as captions, help text, tabbing and keyboard
      shortcuts.  Internationalization issues are being
      addressed in conjunction with the Internationalization
      Working Group and are addressed by following the same
      design principles as within the rest of XHTML. All form controls defined here are suitable for implementation as Aural CSS (ACSS) form controls.</p>

    <p>
        Several XForms form controls are of a general class that represent the concept of
        selecting from available choices.  Such selection
        controls can be characterized along a presentational
        dimension that is completely orthogonal to the
        functional distinction.  Distinguishing the
        <em>presentational</em> from the
        <em>functional</em> dimension allows the
        expression of the <em>meaning</em> of a
        particular form control--see <a href="#">[aui-conversational-gestures]</a> for a definition
        of such high-level  user interaction primitives.</p>
      

      <p>This chapter includes non-normative graphical
      examples of many form controls.
      The CSS Working Group is providing assistance with creating
      default CSS rules for producing visual renderings 
      of standard XForms form controls. This
      specification will also include non-normative rules for
      how these same controls might be rendered to alternative
      access modalities.</p><div class="issue"><p class="prefix"><a name="control-names"></a><b>Issue (control-names):</b></p>
      <p>All form control names listed here should be considered advisory until further consensus is reached in the Working Group.</p>
    </div><p>For each form control, the following aspects will be defined:</p>

  <blockquote><p>Description<br>Examples<br>Data Binding Restrictions<br>Implementation Hints<br>XML Representation</p></blockquote><p>The form controls defined here use common attributes and elements that are defined later in this chapter (<a href="#"><b>???</b></a>).</p></div>
  
  <div class="div2">
<h3><a name="ui-entry"></a>1.2 textbox</h3><p>Description: This form control enables free-form data entry.</p><p>Examples:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox ref="order/shipTo/street" style="width:xx; height:xx"&gt;
 &lt;caption&gt;Street&lt;caption&gt;
 &lt;help&gt;Please enter the number and street name&lt;/help&gt;
&lt;/textbox&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes <code>height</code>
        and <code>width</code>
        specify the display size of the form control. Note
        that the constraints on how much text can be input are
        obtained from the underlying XForms Model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render the above example as follows:</p>

      <p><img src="images/ui-textbox.png" alt="an average-looking text entry field. The title, 'street' has been automatically aligned to the left"></p>
    <p>Data Binding Restrictions: The entered value of the form control (after processing as described in <a href="#"><b>???</b></a>) is treated as a lexical value. A datatype bound to this form control will be treated as a restriction upon the allowed entered value.</p><p>Implementation Hints: Implementations may represent this form control with more than one native user interface control, for example a form control that appears to be three separate smaller entry fields for "day", "month", and "year" for a date datatype. Further, for date datatypes, a calendar system for data entry may be used, including non-Gregorian calendar systems. For numeric datatypes, additional features might include spin buttons or other conveniences. When bound to a datatype that accepts newline characters, this form control should accept multi-line input.</p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>textbox</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/textbox&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes</b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  <div class="div2">
<h3><a name="ui-secret"></a>1.3 secret</h3><p>Description: This form control is used for obtaining   information that is considered sensitive, and thus  not echoed
        to a visual or aural display as it is being entered, e.g., password entry.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret ref="/login/password" style="width:xx; height:xx"&gt;
  &lt;caption&gt;Please enter your password --it will not be visible as you type.&lt;caption&gt;
&lt;/secret&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes
        <code>height</code> and <code>width</code> specify
        the display size of the form control. Note that
        the constraints on how much text can be input are
        obtained from the underlying XForms model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render this form control
        as follows:</p>

      <p><img src="images/ui-password.png" alt="an                   average-looking text entry field, with '*'                   characters where the text would be                   expected"></p>
      <p>Data Binding Restrictions: Identical to <code>textbox</code>.</p><p>Implementation Hints: In general,  implementations, including accessibility aids, would render a "*" or similar character instead of  the actual characters entered, and thus would  not render the entered value of this form control. Note that this provides only a casual level of security; truly sensitive information will require additional security measures outside the scope of XForms.</p><div class="example">
<h5>Example: XML Representation
          &lt;<code>secret</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/secret&gt;</pre></td></tr></table>
        <blockquote><p>

          <b>common attributes</b> defined 
            in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-uploadMedia"></a>1.4 uploadMedia</h3><p>Description: This form control enables the common feature of Web sites to upload a file from the local file system, as well as accepting input from various devices including microphones, pens, and digital cameras.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia ref="mail/attach1" mediaType="image/*"&gt;
  &lt;caption&gt;Select image:&lt;/caption&gt;
&lt;/upload&gt;</pre></td></tr></table>
      
      

      
      <p>A graphical browser might render this form control as follows:</p>

      <p><img src="images/ui-upload.png" alt="A drop-down box; main display reads 'Select Image:' with a cutesey icon. The drop-down                   itself has three items: (icon)-From Scanner or Camera...; (icon)-Scribble...; Browse..."></p>
      <p>Data Binding Restrictions:  This form control can only be bound to datatypes <code>xsd:base64Binary</code> or <code>xsd:hexBinary</code>, or types derived by restriction from these.</p><p>Implementation Hints:</p><ul>
        <li>
          <p>Implementations with a file system SHOULD support "file upload"--selecting a specific file, for all mediaTypes. The types of files presented
            by default MUST reflect the mediaType specified in the XForms Model, for
            example defaulting to only audio file types in the file dialog when the
            mediaType is "audio/*". In XForms 1.0, there is a 1:1 binding between a
            uploadMedia form control and one of the <code>xform:binary</code> datatypes, although that
            single file may be compound (e.g. application/zip).</p>
        </li>
        <li>
          <p>Implementations with specific pen/digitizer hardware SHOULD (and
            implementations with other pointing devices MAY) support "scribble"--allowing in-place creation of pen-based PNG image data, when the mediaType
            is "image/*" or "image/png". Other mediaTypes besides image/png MAY share this
            input method.</p>
        <div class="note"><p class="prefix"><b>Note:</b></p><p>Commonly, people have trouble drawing recognizable figures or
                signatures with a conventional pointing device like a mouse or track ball.
                Hence, a reasonable implementation of XForms might not want this feature, hence the
                "MAY" here for generic pointing
                devices</p></div></li>
        <li>
          <p>Implementations with specific audio recording capabilities SHOULD support
            <em>record</em>--in-place recording of an audio clip, when the mediaType is
            "audio/*" or "audio/basic". Other mediaTypes besides "audio/basic" MAY share this
            input method.</p>
        </li>
        <li>
          <p>Implementations with a digital camera/scanner interface SHOULD support
            <em>send image</em>--in-place upload of images from an attached device, when the
            mediaType is "image/*" or "image/jpeg". Other mediaTypes besides "image/jpg" MAY
            share this input method.</p>
        </li>
        <li>
          <p>Implementations with video recording capability SHOULD provide a "record"
            option for video/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations with 3d capabilities SHOULD provide a 3d interface option
            for model/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations MAY provide proprietary implementations (for example, a
            mediaType of text/rtf could invoke an edit window with a proprietary word
            processing application)</p>
        </li>
        <li>
          <p>Implementations are encouraged to support other input devices not
            mentioned here.</p>
        </li>
        </ul>
      
      <div class="example">
<h5>Example: XML Representation: &lt;<code>uploadMedia</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia
  (common attributes)
  mediaType = list of content types
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/uploadMedia&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a><br><b>mediaType = list of media types</b> - list of suggested media types, used by the XForms Processor to determine which input methods apply.</p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-selectOne"></a>1.5 selectOne</h3><p>Description: This form control allows the user to make a single selection from multiple choices.</p><p>Typically, a stylesheet would be used to determine
        the exact appearance of form controls, though a
        means is provided to make a concrete selection
        through an attribute.  The value of the attribute
        consists of one of the following values, each of
        which may have a platform-specific behavior:</p>

      <blockquote><p>
         radioGroup
        <br>checkboxGroup
        <br>pulldown
        <br>listbox 
        <br>comboGroup
      </p></blockquote><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="icecream/flavor"&gt;
  &lt;caption&gt;Flavor&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="vanilla"&gt;Vanilla&lt;/item&gt;
    &lt;item value="strawberry"&gt;Strawberry&lt;/item&gt;
    &lt;item value="chocolate"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;</pre></td></tr></table>

        <p>
          In the above example, selecting one of the choices will result in the associated <code>value</code>
          given by attribute <code>value</code> on the selected item being set in the underlying data instance at the location <code>icecream/flavor</code>.
          The <code>value</code>s given in the user interface shown above may be used in constructing a default schema if no schema is provided by the XForms author.
        </p>

        

        
        <p>A graphical browser might render this form control as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
            <tr><td><img src="images/ui-selectOne-listbox.png" alt="a list control, Vanilla, Strawberry, and Chocolate visible; Strawberry selected"></td><td><img src="images/ui-selectOne-checkbox.png" alt="checkboxes, Vanilla, Strawberry, Chocolate; Chocolate is selected"></td><td><img src="images/ui-selectOne-radio.png" alt="radio buttons, Vanilla, Strawberry, Chocolate; Strawberry is selected"></td><td><img src="images/ui-selectOne-pulldown.png" alt="a collapsed pull-down list; Vanilla is selected"></td></tr></tbody></table><p>Data Binding Restrictions: This form control will select the lexical value from the <code>value</code> attribute (or in the absence of such an attribute, the text content of the <code>item</code> element) of the single item selected. If the datatype bound to this form control does not permit the selected value (for instance a datatype of <code>xsd:decimal</code> with an attribute <code>value="abc"</code>), the form control with that selection will be perpetually considered invalid and it will not be possible to submit the form. Authors are encouraged to avoid this situation.</p><p>If the datatype bound to this form control includes a non-enumerated value space (for instance <code>xsd:string</code>, or <code>xsd:string</code> as part of a union), or if the "comboGroup" UI hint is specified, the form control then should allow free data entry, as described in <a href="#"><b>???</b></a>, in addition to the behavior defined here.</p><div class="issue"><p class="prefix"><a name="items-specified-elsewhere"></a><b>Issue (items-specified-elsewhere):</b></p><p>Yet to be decided is allowing display and/or storage values located elsewhere to be retrieved from a binding expression.</p></div><p>Some user interface combinations may allow a state of zero selected items, in which case the lexical value of a zero-length string is selected.</p><p>Implementation Hints: 
          User interfaces may choose to render <code>selectOne</code>
          as a pulldown list or group of radio buttons, among other options. The selectUI attribute offers a hint as to which rendering might be most appropriate, although any styling information (such as CSS) should take precedence.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>selectOne</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectOne&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>    selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance
              override
          </p></blockquote>
        </div></div>
  
  <div class="div2">
<h3><a name="ui-selectMany"></a>1.6 selectMany</h3><p>Description: This form control allows the user to make multiple selections from multiple choices.</p>
      
      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany ref="icecream/flavors"&gt;
  &lt;caption&gt;Flavors&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="v"&gt;Vanilla&lt;/item&gt;
    &lt;item value="s"&gt;Strawberry&lt;/item&gt;
    &lt;item value="c"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectMany&gt;</pre></td></tr></table><p>In the above example, more than one flavor can be
          selected, populating the instance data with multiple selections.</p>

        

        
        <p>A graphical browser might render form control
          <code>selectMany </code>as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
              <tr><td><img src="images/ui-selectMany-listbox.png" alt="list-box; Vanilla, Strawberry, and                                Chocolate visible; Strawberry and Chocolate                                selected"></td><td><img src="images/ui-selectMany-checkbox.png" alt="checkboxes, Vanilla, Strawberry, and                                                             Chocolate; Strawberry and Chocolate                                                             selected"></td><td><img src="images/ui-selectMany-radio.png" alt="Radio buttons, Vanilla, Strawberry, and                                                                                          Chocolate; Strawberry and Chocolate                                                                                          selected"></td><td>N/A</td></tr></tbody></table>
        <p>Data Binding Restrictions: When zero or one items are selected, this form control behaves exactly like <code>selectOne</code> with regard to the lexical value that is selected. When multiple items are selected, the lexical value is a space-separated list of the selected values. The datatype bound to this form control must be capable of supporting this format, typically a Schema list type. Cases where each of the multiple selections appear in the instance data attached to a separate element are handled through the <code>repeat</code> construction (<a href="#"><b>???</b></a>).</p><div class="note"><p class="prefix"><b>Note:</b></p><p>A limitation of the Schema list datatypes is that whitespace characters in the storage values (the <code>value="..."</code> attribute of the <code>item</code> element) are always interpreted as separators between individual data values. Therefore, authors should avoid using whitespace characters within storage values.</p><p>For instance, the following incorrect item declaration:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item value="United States of America"&gt;USA&lt;/item&gt;</pre></td></tr></table><p>when selected, would introduce not one but four additional selection values: "America", "of", "States", and "United".</p></div><p>Implementation Hints: An accessibility aid might allow the user to browse
          through the available choices  and leverage
          the grouping of choices in the markup to
          provide enhanced navigation through long lists
          of choices.</p><div class="example">
          
<h5>Example: XML Representation: &lt;<code>selectMany</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectMany&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance override</p></blockquote>
        </div></div><div class="div2">
<h3><a name="ui-selectBool"></a>1.7 selectBoolean</h3><p>Description: This form control represents an on/off or true/false or yes/no (or similar) choice.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean ref="questionnaire/married"&gt;
  &lt;caption&gt;Are you married?&lt;/caption&gt;
  &lt;help&gt;We need this to determine your tax allowance&lt;/help&gt;
  &lt;choices&gt;
    &lt;item value="true"&gt;Yes&lt;/item&gt;
    &lt;item value="false"&gt;No&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table><p>Data Binding Restrictions: This form control produces only two possible lexical values: <code>true</code> or <code>false</code>. To be considered valid, the datatype bound to this form control (typically <code>xform:boolean</code>) must be able to accept these two lexical values.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Scenarios where the desired lexical value is anything other than 'true'/'false' are not suitable for the <code>selectBoolean</code> form control.</p><p>For example, if the values placed into the instance data were required to be either "male" or "female", the <code>selectOne</code> form control should be used instead.</p></div><p>Implementation Hints: Visual implementations would typically render this as a checkbox. In some cases, like the above example or in aural environments, it may be helpful to provide labels for the respective choices. This is accomplished through the <code>choices</code> mechanism, similar to the other <code>select...</code> form controls.</p><div class="example">
<h5>Example: XML Representation:
            &lt;<code>selectBoolean</code>&gt;</h5> <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean
  (common attributes )
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>selectUI = (TBD)</b></p></blockquote>
        </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-range"></a>1.8 range</h3><p>Description: This form control allows selection from a continuous range of values.</p>

      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range ref="/stats/balance" start="-2.0" end="2.0" stepSize="0.5"&gt;
  &lt;caption&gt;Balance:&lt;/caption&gt;
&lt;/range&gt;</pre></td></tr></table><p>A graphical browser might render this as follows:</p>
  <p><img src="images/ui-range.png" alt="a slider control, from -2 to +2"></p>
  <p>Data Binding Restrictions: Only datatypes  which represent a continuous range where
   it is possible to express a difference value can be bound to this form control.
   (For instance, <code>xform:decimal</code> would be fine, while <code> xform:string</code>
   or <code>xform:..Binary</code> would not). In terms of Schema datatypes, the datatype must
   be either 1) have a total order relationship, or 2) an overall partial order relationship,
   but totally ordered within the range specified between the <code>start</code> and <code>end</code>
   attributes. </p>
   <div class="issue"><p class="prefix"><a name="enum-range"></a><b>Issue (enum-range):</b></p><p>Should an enumeration be allowed to bind to this form control?
   If yes, how should it be ordered?</p></div>
   
   <p>Implementation Hints: In graphical environments, this form control would typically be
   rendered as a "slider" or "volume control".</p><p>Notice that the attributes
   of this element encapsulate sufficient metadata that in
        conjunction with the type information 
        available from the XForms Model proves sufficient to produce
        meaningful prompts when using modalities like speech,
        e.g., when using an accessibility aid.
        Thus, an Aural CSS enabled user agent might speak a prompt of the
        form 
        <em>Please pick a date in the range January 1, 2001 through
          December 31, 2001.</em>
      </p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>range</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range
  (common attributes)
  start = datavalue
  end = datavalue
  stepSize = datavalue-difference
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/range&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>start = datavalue</b> - 
            Lexical starting bound for the range, of the
            same datatype bound to the form control
          <br><b>end = datavalue</b> - Lexical ending bound for the range, of the same datatype bound to the form control<br><b>stepSize = datatype-difference</b> - Prefered step-size to use  for incrementing or
            decrementing the value within the form
            control, of a datatype that can express the difference between two values of the datatype bound to the form control</p></blockquote>
      </div>

      
      
      </div><div class="div2">
<h3><a name="ui-button"></a>1.9 button</h3><p>Description: This form control is similar to the XHTML
        element of the same name and allows for
        user-triggered actions. This form control may also be used to
        advantage in realizing other custom form controls.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button&gt;
Example unavailable at time of publication
&lt;/button&gt;</pre></td></tr></table><p>Data Binding Restrictions:</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Binding a model item has no direct effect on a button, but provides a context for any event handlers that are attached.</p></div><p>Implementation Hints: Graphical implementations would typically render this form control as a push-button.</p>

      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>button</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/button&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-output"></a>1.10 output</h3><p>Description: This form control renders a value from the instance data, but provides no means for entering or changing data. 
        This form control may be used in a <code>caption</code>,
        for instance,  when authors want to say: "I charged you <em>value</em> - and here is 
          why.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>I charged you
&lt;output ref="order/totalPrice"/&gt;
and here is why:</pre></td></tr></table>
      

      
      <p>A graphical browser might render an output form control as follows:</p>

      <p><img src="images/ui-output.png" alt="average-looking text, reading 'I charged you                   100.0 - and here is why:'"></p>
      <p>Data Binding Restrictions: The lexical value of the datatype bound to this form control is displayed, after processing as described in <a href="#"><b>???</b></a>.</p><p>Implementation Hints: An audio browser might apply  properties to this form control to
        <em>aurally highlight</em>
        the displayed value to provide audio formatted output.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>output</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;output
 id = xsd:ID
 ref = binding-expression
 xform = instance data selector
 format = formatting-expression
&gt;
  &lt;!-- empty content --&gt;
&lt;/output&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>id = xsd:ID</b> - Optional unique identifier used for linking.<br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a><br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.<br><b>format = formatting-expression</b> - Optional format specifier</p></blockquote>
      </div><table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">We need to decide on how we define attribute
          <code>format</code> on form control
          <code>output</code>.
          The functionality needed is similar to what
          functions like <code>printf</code> typically
          take.</td></tr></table></div><div class="div2">
<h3><a name="ui-submit"></a>1.11 submit</h3><p>Description: This form control submits all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit xform="timecard"&gt;
  &lt;caption&gt;Submit&lt;/caption&gt;
&lt;/submit&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>submit()</code> method.</p><div class="example">
<h5>Example: XML
          Representation: &lt;<code>submit</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/submit&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-reset"></a>1.12 reset</h3><p>Description: This form control resets to the initial values all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset ref="/tcard/data" xform="timecard"&gt;
  &lt;caption&gt;Reset totals&lt;/caption&gt;
&lt;/reset&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>reset()</code> method.</p><div class="example">
        
<h5>Example: XML Representation:
          &lt;<code>reset</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/reset&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  
  
<div class="div2">
    
<h3><a name="ui-common"></a>1.13 Common Markup</h3>
    
    <p>
      The preceding form control definitions make reference to several child elements and attributes that are common to several of the XForms form controls. This section defines these common markup components.</p>

    <div class="div3">
      
<h4><a name="ui-common-attributes"></a>1.13.1 Common Attributes</h4>
      <div class="issue"><p class="prefix"><a name="XHTML-attrs"></a><b>Issue (XHTML-attrs):</b></p><p>XHTML defines two attributes on element
          <code>html:form</code>--<code>accept</code>
          and <code>accept-charset</code>. Additionally, attribute
          <code>accept-charset</code> also appears on element
          <code>html:input</code>.
          We need to bring the equivalent to these into the XForms specification.</p></div>
      <div class="example">
        
<h5>Example: XML Representation: Common Attributes</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>xmlns = xsd:anyURI
xml:lang = xsd:language
id = xsd:ID
class = space separated list of classes
style = associated style info
ref = binding-expression
xform = xsd:IDREF
navIndex = xsd:nonNegativeInteger : 0
accessKey = xsd:token</pre></td></tr></table>
        <blockquote><p> 
          <b>xmlns = xsd:anyURI</b> - Optional standard XML attribute for identifying an XML namespace.
          <br><b>xml:lang = xsd:language</b> - Optional standard XML attribute to specify a human language for this element.
          <br><b>id = xsd:ID</b> - Optional unique identifier used for linking.
          <br><b>class = space separated list of classes</b> - Optional selector for a style rule.
          <br><b>style = associated style info</b> - Optional inline style specification.
          <br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a>. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>navIndex = xsd:nonNegativeInteger : 0</b> - Optional attribute is a non-negative integer in the range of 0-32767 used 
            to define the navigation sequence. This gives the author control over the 
            sequence in which <a title="" href="#">form control</a>s 
            are traversed. The default navigation order is specified in the chapter <a href="#"><b>???</b></a>.<br><b> accessKey = xsd:string</b> - Optional attribute defines a shortcut for moving the input focus directly 
            to a particular <a title="" href="#">form control</a>. 
            The value of this is typically a single character which when pressed together 
            with a platform specific modifier key (e.g. the <em>alt</em> key) results 
            in the focus being set to this <a title="" href="#">form 
              control</a>.
          
        </p></blockquote>
      </div>
      
      <p>
        CSS properties for controlling the look and feel of
        XForms form controls are being defined in
        conjunction with the CSS Working Group.  This version
        of the XForms working draft defines the XForms form controls independent of visual
        presentation. Additionally, sample default
        visual presentations are shown for each form control
        defined in this Working Draft.  The CSS Working Group
        has agreed to help us develop a default CSS stylesheet
        capable of producing the sample default renderings
        illustrated in this working draft.  The results of the
        above will be used to document the use of CSS
        properties within XForms user interface elements for
        the final version of the XForms specification.</p>

      
    </div>
    <div class="div3">
      
<h4><a name="ui-common-elements"></a>1.13.2 Common Child Elements</h4>
      
      <p>
        Child elements <code>caption</code>, <code>help</code> and
        <code>hint</code> detailed below provide the ability to attach human-readable
        metadata to XForms form controls.
      </p>

      
      <p>Instead of supplying such metadata e.g., the label
        for a form control, as inline content of
        the contained element <code>caption</code>, the metadata can be
        pointed to by using a simple XLink attribute
        <code>xlink:href</code> on element <code>caption</code> (or <code>hint</code> or <code>help</code>).
        Notice that systematic use of this feature can be
        exploited in internationalizing XForms user interfaces
        by:
        
      </p>

      <ul><li><p>Factoring all human readable
            messages to a separate
            resource XML file.</p></li><li><p>Using URIs into this XML resource
            bundle within individual caption
            elements</p></li><li><p>Finally, an XForms
            processor can use content negotiation to obtain the
            appropriate XML resource bundle,
            e.g., based on the <code>accept-language</code>
            headers from the client, to serve up the user
            interface with messages localized to the
            client's locale.</p></li></ul><div class="div4">
        
<h5><a name="ui-common-elements-caption"></a>1.13.2.1 caption</h5>
        
        <p>The required element <code>caption</code>  labels the containing form control with
          a descriptive label. Additionally, the caption makes it possible
          for someone who can't see the form control to
          obtain a short description while navigating
          between form controls.</p>


        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>caption</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;caption
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/caption&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes</b> defined in
              <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        <p>An accessibility aid would typically speak the metadata
          encapsulated in element <code>caption</code> when the
          containing form control gets focus.</p>
      </div>
      <div class="div4">
        
<h5><a name="ui-common-elements-help"></a>1.13.2.2 help</h5>
        
        <p>
          The optional element <code>help</code> provides a longer
          description that will help users  understand how
          to fill out this <a title="" href="#">form control</a>.
          The <code>help</code> text will   be shown only
          on request.</p>

        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>help</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;help
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/help&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        
        <p>A graphical browser might render help as follows:</p>

        <p><img src="images/ui-password-with-help.png" alt="a                     password entry field, with a popup window below,                     displaying instructions for retrieving a forgotton                     password"></p><p>An accessibility aid might speak this
          information upon request.</p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-hint"></a>1.13.2.3 hint</h5>
        
        <p>
          The optional element <code>hint</code> provides a short
          hint for the user, typically represented as a
          tooltip by graphical user agents.  The tooltip
          text will normally be shown when the user remains
          on the form control for more than a certain length
          of time.  Accessibility aids might render such
          tooltips using speech. This element is optional,
          and its content model is mixed.</p>

        <div class="example">
          
<h5>Example: XML Representation:
            &lt;<code>hint</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;hint
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/hint&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
        </div>

        
        <p>A graphical browser might render hints as follows:</p>

        <p><img src="images/ui-textbox-with-hint.png" alt="an average-looking text entry field, with a mouse pointer visible and a tooltip below, reading 'Please enter the number and street name'"></p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-onevent"></a>1.13.2.4 onevent</h5>
        
        <p>
          This element can be used to bind event handlers to
          form controls. It is defined in <a href="#">[ref-xhtml-events]</a>. Details on XForms events
          can be found in the chapter
          <a href="#"><b>???</b></a>.</p>

        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>onevent</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;onevent
  (attributes defined in XHTML Events)
&gt;
  &lt;!-- Action handlers --&gt;
&lt;/onevent&gt;</pre></td></tr></table>
        </div>
        <p>
          Element <code>onevent</code> is defined in the XHTML Events
          module.
          It declares   an event listener 
          by specifying the event  to handle  and the event handler to
          invoke.</p>
      </div>
      
    <div class="div4">
<h5><a name="ui-common-elements-item"></a>1.13.2.5 item</h5>

        <p>This element is used within list form controls to represent a single item of the list.</p>
        <div class="issue"><p class="prefix"><a name="onevent-for-item"></a><b>Issue (onevent-for-item):</b></p><p>Should onevent handlers be allowed here for individual items in a list?</p></div><div class="example">
<h5>Example: XML Representation: &lt;<code>item</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item
  value = lexical-representation
&gt;
  &lt;!-- #PCDATA --&gt;
&lt;/item&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>value = lexical-representation</b> - the "storage value" for the item, to be placed in the instance data when this item is chosen.</p></blockquote>
        </div>
      </div><div class="div4">
<h5><a name="ui-common-elements-choices"></a>1.13.2.6 choices</h5>
        <p>This element is used within list form controls to group items. This provides the same functionality as element <code>optgroup</code> in HTML 4.0.</p>
        <div class="example">
<h5>Example: XML Representation: &lt;<code>choices</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;choices&gt;
  &lt;!-- (item | choices)+ --&gt;
&lt;/choices&gt;</pre></td></tr></table>
          
        </div>
      </div></div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="acks"></a>A Acknowledgements (Non-Normative)</h2> 
<p>The Authors of this document are:</p>
<ul>
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Micah Dubinko 
    , Cardiff 
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li>
  <li> 
    Roland Merrick 
    , IBM 
  </li>
  <li> 
    T. V. Raman 
    , IBM 
  </li>
  <li>
    Linda Bucksay Welsh
    , Intel
     (<i>Until April 2001</i>) 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
    </li>
    <li>
      Rob McDougall 
      , JetForm Corporation 
    </li>
  <li>
    John McCarthy
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Frank Olken
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li>Panagiotis Reveliotis
    , Phillips
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li><li>Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li>
    Dave Raggett
    , W3C/OpenWave
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>
  
  <p>This document was written with the participation of the XForms Working
        Group, which currently consists of the following members:</p> 
<ul> 
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li><li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li><li> 
    Micah Dubinko 
    , Cardiff 
  </li> 
  <li>
    Driss Eddaifi
    , Ecole Mohammadia d'Ing&eacute;nieurs
  </li>
  <li>
    Michalis Petropoulos
    , Enosys Markets, Inc.
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li> 
  <li> 
    Frank Boumphrey 
    , HTML Writer's Guild 
  </li> 
  <li> 
    Roland Merrick 
    , IBM 
  </li><li> 
    T. V. Raman 
    , IBM 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
  </li>
  <li>
    Rob McDougall 
    , JetForm Corporation 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li> 
    Alex Hopmann 
    , Microsoft 
  </li> 
  <li>Dave Hyatt
    , Netscape/AOL
  </li>
  <li> 
    Eric Pollmann 
    , Netscape/AOL 
  </li>
  <li>
    Tom Butcher
    , OpenDesign
  </li> 
  <li> 
    K. P. Lee 
    , Phillips 
  </li> 
  <li> 
    Roli Wendorf 
    , Phillips 
  </li> 
  <li> 
    Ted Wugofski 
    , Openwave 
  </li> 
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li> 
  <li> 
    Dave Manning 
    , PureEdge 
  </li>
  <li>
    Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li> 
    Zoe Lacroix 
    , SurroMed, Inc. 
  </li>
  <li>
    Masayasu Ishikawa
    , W3C
  </li> 
  <li>
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>

<p>The XForms Working Group has benefited in its work from the
        participation and contributions of Invited Experts:</p> 
<ul> 
  <li> 
    Tom Schnetlage 
    , University of Berkeley 
  </li> 
  <li> 
    Dan Gillman 
    , Federal Bureau of Labor Statistics 
  </li> 
  <li> 
    Eliot Christian 
    , U.S. Geological Survey 
  </li>
  <li>
    Mikko Honkala
    , Helsinki University Of Technology
  </li>
</ul>

<div class="note"><p class="prefix"><b>Note:</b></p><p><em>Additional Acknowledgments</em>: The editors would like to thank Kai Scheppe, Malte 
  Wedel and G&ouml;tz Bock for lots of constructive criticism on early versions 
  of the chapter <a href="#"><b>???</b></a> and their contributions to its present content.</p></div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="changes"></a>A Changes from Previous Release (Non-Normative)</h2>
 
  <div class="div2"> 
    
<h3><a name="changes-overall"></a>1 Changes since the 16-Feb-2001 release</h3> 
  <p>There have been significant changes to the XForms since our last public draft. In addition, we have switched over to authoring the specification using xmlspec.dtd from writing raw HTML (details at <a href="#"><b>???</b></a>). The change from hand-authored HTML to xmlspec has introduced changes throughout the document, and consequently, adding diff marks for each change would be excessively distracting and make this appendix difficult to read. Instead, this section summarizes how things have changed so that readers familiar with the previous draft can get up to to speed with the new specification.</p></div> 
<div class="div2">
<h3><a name="changes-about"></a>2 Changes to Chapter 1 'About XForms'</h3><p>The typographic samples have been updated to work better with the XMLspec publishing system.</p></div><div class="div2">
<h3><a name="changes-concepts"></a>3 Changes to Chapter 2 'Concepts'</h3><p>This chapter has been completely updated. The new version contains a samples of complete forms and a step-by-step guide through the most common functionality in XForms.</p></div><div class="div2">
<h3><a name="changes-terms"></a>4 Changes to Chapter 3 'Terminology'</h3><p>Terms have been cleaned-up and brought into line with the rest of the document. The term "datatype" has been imported from XML Schema. The terms "computed expression", "containing document", and "model item property" are new.</p></div><div class="div2">
<h3><a name="changes-datatypes"></a>5 Changes to Chapter 4 'Datatypes'</h3><p>The Working Group has decided to more directly reference XML Schema datatypes, hence this chapter has been restructured to include by reference Schema datatypes, and define any additional types. Remaining issues are listed within the chapter.</p></div><div class="div2">
<h3><a name="changes-model"></a>6 Changes to Chapter 5 'XForms Model'</h3><p>Removed all "simple syntax". Clarified how computed model item properties (including calculate) work. Improved terminology, consistently using terms from chapter 3.</p><p>Open and closed enumerations are now under separate headings. Removed 'group' to UI chapter. Renamed "Arrays" section to "Multiple Simultaneous Values", and added section "Repeating Line Items". Renamed "Switch" to "Alternate Representation", with a pointer to the UI section.</p><p>Significant changes to this chapter, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-expr"></a>7 Changes to Chapter 6 'XPath Expressions in XForms'</h3><p>This chapter was previously named "Dynamic Constraint Language". The new title more accurately describes both the chapter and the role of XPath within XForms. The term "Dynamic Constraints Language" has been removed throughout the remainder of the document as well.</p><p>New introductory material describes the various ways XPath is used throughout XForms. The "Instance Data" section formerly residing in the Processing Model chapter is now in this chapter. The section on Datatypes now describes which parts of XForms use XPath datatypes and which use XML Schema datatypes.</p><p>The BNF productions have been removed, in favor of stronger wording that XPath is to be used directly.</p><p>The section "Evaluation Context" has been more thoroughly cross-checked against the XPath specification, with several underspecified areas now addressed.</p><p>The large set of custom operators has been replaced with a NOTE referencing the built-in XPath operators.</p><p>New functions defined--<code>count-non-empty(node-set)</code>, and <code>xforms-property(string)</code>.</p><p>Several of the functions have been specified in greater detail.</p><p>The extensibility section now makes a reference to a possible direction--the <code>element-available()</code> and <code>function-available()</code> functions.</p></div><div class="div2">
<h3><a name="changes-controls"></a>8 Changes to Chapter 7 'Form Controls'</h3><p>Originally part of the chapter "XForms User Interface". Now split into a separate chapter. The material in this new chapter has been restructured for readability.</p><p>The "Design Input" section has been removed. Further details are available in the XForms Requirements document.</p><p> 

 

Note that names of form controls have changed, but are  not yet cast in stone. The following changes and additions have been made to the core form controls:

</p><blockquote><p>hidden has been removed as a form control<br>output, textbox, submit, and reset  have kept their same names<br>exclusiveSelect and multipleSelect have been renamed selectOne and selectMany<br>checkbox is now selectBoolean<br>password is now secret<br>button has been fleshed out, including event listener details<br>uploadMedia and range are new form controls in this Working Draft</p></blockquote><p>The "AnyControl" is now described in prose instead of formally. In addition, there are minimal changes to the common elements and attributes defined in this section. Element onevent is now taken from the XHTML Events module and is therefore no longer defined in detail in this specification. A later section defines XForms-specific event handlers for use within event listeners declared via element onevent.</p></div><div class="div2">
<h3><a name="changes-ui"></a>9 Changes to Chapter 8 'XForms User Interface'</h3><p>The section "Future Work" has been removed.</p><p>The specification now  introduces constructs for authoring conditional user interfaces (see switch) and a construct for authoring repeating widgets (see repeat) for use in creating purchase orders or shopping carts that wish to create the user interface needed for populating repeating rows from a table.</p><p>Conditional User Interfaces: 
This is a new section, and defines construct switch along with its associated event handlers.</p><p>New Construct repeat:
There is a new section that defines construct repeat for authoring things like shopping carts where the user interface for populating a structure needs to be repeated multiple times.</p><p>UI  Templates: 
Constructs for creating and using user interface templates have been renamed for consistency. The new element names are uiTemplate and useUITemplate.</p><p>Constructing High-level User Interfaces:
The content pertaining to creating higher-level user interfaces from the basic building blocks has been substantially reorganized. This portion of the specification first defines construct group used to group user interface controls. Element group no longer defines an XForms-specific layout model; instead all layout attributes come from CSS. This enables XForms user interfaces to be laid out using either CSS or XSL:FO, or for that matter languages such as SVG.</p><p> 

Subforms And Subpages:
With the XForms constructs for authoring higher level user interaction now fleshed out, it turns out that there is no need for an XForms-specific subform or subpage construct --we can leverage existing mechanisms such as group and more generally, XHTML's div elements for this purpose.</p></div><div class="div2">
<h3><a name="changes-binding"></a>10 Changes to Chapter 9 'Binding'</h3><p>Some of the text has been cleaned up with regard to the relationship with XPath, but otherwise no significant content changes.</p></div><div class="div2">
<h3><a name="changes-structure"></a>11 Changes to Chapter 10 'Document Structure'</h3><p>This chapter was previously named "Using XForms with Other Document Types". Added new section "Integration with XLink". Updated examples to reflect xlink namespace. </p></div><div class="div2">
<h3><a name="changes-rpm"></a>12 Changes to Chapter 11 'Processing Model and Conformance'</h3><p>Cleaned up terminology and brought into greater consistency with the rest of the document.</p><p>Removed the <code>locale</code> property; separated the rest into those that can vary from one <code>xform</code> element to the next, and those that are the same across the containing document. Renamed <code>use-nulls</code> to <code>use-nil</code>.</p><p>The "suspend" functionality has been removed, including the <code>xforms-suspend</code> event, and will appear in a post-1.0 version of XForms. The <code>xforms-resume</code> event has been renamed <code>xforms-initialize</code>. Clarified that model items are associated with only a single value.</p><p>The "instance data" section has moved to the XPath Expressions chapter, though rules for constructing instance data are still in this chapter, and reworded for clarity.</p><p>The multipart/form-data section has been replaced with a reference to RFC 2388.</p><p>An early  conformance section has been added.</p></div><div class="div2">
<h3><a name="changes-schema"></a>13 Changes to Appendix  'Schema for XForms'</h3><p>For this release, the Schema only covers the XForms form controls and the Document Structure markup.</p><p>Significant changes to this appendix, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-xslt"></a>14 Changes to Appendix 'XSLT from Simple Syntax'</h3><p>Following the Working Group decision to remove the simple syntax, this appendix has also been removed.</p></div><div class="div2">
<h3><a name="changes-samples"></a>15 Change to Appendix 'Sample Forms'</h3><p>Sample forms have been incorporated into <a href="#"><b>???</b></a></p></div><div class="div2">
<h3><a name="changes-optional"></a>16 Changes to Appendix 'Optional Function Library'</h3><p>The Working Group has decided to remove all optional functions from XForms.</p></div><div class="div2">
<h3><a name="changes-references"></a>17 Changes to Appendix 'References'</h3><p>References have been updated to refer to the changes in document status, most notably the XML Schema recommendation. New normative reference to XLink, RFC2388; informative reference to T. V. Raman's book on auditory user interfaces. Removed orphaned references to ISO 8601, RFC 2369, RFC 2141 and moved  the orphaned Unicode reference to the informative section.</p></div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="controls"></a>1 Form Controls</h2>
  <div class="div2">
    
<h3><a name="ui-intro"></a>1.1 Introduction</h3>
    
    <p>
      XForms User Interface controls, also called <a title="" href="#">form control</a>s, are declared using
      markup elements, and their behavior refined via
      markup attributes. This markup may be further
      decorated with style properties that can be set
      using CSS stylesheets to deliver a customized look
      and feel. Form controls defined
      here are bound to the underlying instance data
      using the <a title="" href="#">binding</a> attributes as defined in the
      chapter <a href="#"><b>???</b></a>.</p>

    
    <p>
      The XForms form controls enable
      accessibility by taking a uniform approach to such
      features as captions, help text, tabbing and keyboard
      shortcuts.  Internationalization issues are being
      addressed in conjunction with the Internationalization
      Working Group and are addressed by following the same
      design principles as within the rest of XHTML. All form controls defined here are suitable for implementation as Aural CSS (ACSS) form controls.</p>

    <p>
        Several XForms form controls are of a general class that represent the concept of
        selecting from available choices.  Such selection
        controls can be characterized along a presentational
        dimension that is completely orthogonal to the
        functional distinction.  Distinguishing the
        <em>presentational</em> from the
        <em>functional</em> dimension allows the
        expression of the <em>meaning</em> of a
        particular form control--see <a href="#">[aui-conversational-gestures]</a> for a definition
        of such high-level  user interaction primitives.</p>
      

      <p>This chapter includes non-normative graphical
      examples of many form controls.
      The CSS Working Group is providing assistance with creating
      default CSS rules for producing visual renderings 
      of standard XForms form controls. This
      specification will also include non-normative rules for
      how these same controls might be rendered to alternative
      access modalities.</p><div class="issue"><p class="prefix"><a name="control-names"></a><b>Issue (control-names):</b></p>
      <p>All form control names listed here should be considered advisory until further consensus is reached in the Working Group.</p>
    </div><p>For each form control, the following aspects will be defined:</p>

  <blockquote><p>Description<br>Examples<br>Data Binding Restrictions<br>Implementation Hints<br>XML Representation</p></blockquote><p>The form controls defined here use common attributes and elements that are defined later in this chapter (<a href="#"><b>???</b></a>).</p></div>
  
  <div class="div2">
<h3><a name="ui-entry"></a>1.2 textbox</h3><p>Description: This form control enables free-form data entry.</p><p>Examples:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox ref="order/shipTo/street" style="width:xx; height:xx"&gt;
 &lt;caption&gt;Street&lt;caption&gt;
 &lt;help&gt;Please enter the number and street name&lt;/help&gt;
&lt;/textbox&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes <code>height</code>
        and <code>width</code>
        specify the display size of the form control. Note
        that the constraints on how much text can be input are
        obtained from the underlying XForms Model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render the above example as follows:</p>

      <p><img src="images/ui-textbox.png" alt="an average-looking text entry field. The title, 'street' has been automatically aligned to the left"></p>
    <p>Data Binding Restrictions: The entered value of the form control (after processing as described in <a href="#"><b>???</b></a>) is treated as a lexical value. A datatype bound to this form control will be treated as a restriction upon the allowed entered value.</p><p>Implementation Hints: Implementations may represent this form control with more than one native user interface control, for example a form control that appears to be three separate smaller entry fields for "day", "month", and "year" for a date datatype. Further, for date datatypes, a calendar system for data entry may be used, including non-Gregorian calendar systems. For numeric datatypes, additional features might include spin buttons or other conveniences. When bound to a datatype that accepts newline characters, this form control should accept multi-line input.</p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>textbox</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/textbox&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes</b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  <div class="div2">
<h3><a name="ui-secret"></a>1.3 secret</h3><p>Description: This form control is used for obtaining   information that is considered sensitive, and thus  not echoed
        to a visual or aural display as it is being entered, e.g., password entry.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret ref="/login/password" style="width:xx; height:xx"&gt;
  &lt;caption&gt;Please enter your password --it will not be visible as you type.&lt;caption&gt;
&lt;/secret&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes
        <code>height</code> and <code>width</code> specify
        the display size of the form control. Note that
        the constraints on how much text can be input are
        obtained from the underlying XForms model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render this form control
        as follows:</p>

      <p><img src="images/ui-password.png" alt="an                   average-looking text entry field, with '*'                   characters where the text would be                   expected"></p>
      <p>Data Binding Restrictions: Identical to <code>textbox</code>.</p><p>Implementation Hints: In general,  implementations, including accessibility aids, would render a "*" or similar character instead of  the actual characters entered, and thus would  not render the entered value of this form control. Note that this provides only a casual level of security; truly sensitive information will require additional security measures outside the scope of XForms.</p><div class="example">
<h5>Example: XML Representation
          &lt;<code>secret</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/secret&gt;</pre></td></tr></table>
        <blockquote><p>

          <b>common attributes</b> defined 
            in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-uploadMedia"></a>1.4 uploadMedia</h3><p>Description: This form control enables the common feature of Web sites to upload a file from the local file system, as well as accepting input from various devices including microphones, pens, and digital cameras.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia ref="mail/attach1" mediaType="image/*"&gt;
  &lt;caption&gt;Select image:&lt;/caption&gt;
&lt;/upload&gt;</pre></td></tr></table>
      
      

      
      <p>A graphical browser might render this form control as follows:</p>

      <p><img src="images/ui-upload.png" alt="A drop-down box; main display reads 'Select Image:' with a cutesey icon. The drop-down                   itself has three items: (icon)-From Scanner or Camera...; (icon)-Scribble...; Browse..."></p>
      <p>Data Binding Restrictions:  This form control can only be bound to datatypes <code>xsd:base64Binary</code> or <code>xsd:hexBinary</code>, or types derived by restriction from these.</p><p>Implementation Hints:</p><ul>
        <li>
          <p>Implementations with a file system SHOULD support "file upload"--selecting a specific file, for all mediaTypes. The types of files presented
            by default MUST reflect the mediaType specified in the XForms Model, for
            example defaulting to only audio file types in the file dialog when the
            mediaType is "audio/*". In XForms 1.0, there is a 1:1 binding between a
            uploadMedia form control and one of the <code>xform:binary</code> datatypes, although that
            single file may be compound (e.g. application/zip).</p>
        </li>
        <li>
          <p>Implementations with specific pen/digitizer hardware SHOULD (and
            implementations with other pointing devices MAY) support "scribble"--allowing in-place creation of pen-based PNG image data, when the mediaType
            is "image/*" or "image/png". Other mediaTypes besides image/png MAY share this
            input method.</p>
        <div class="note"><p class="prefix"><b>Note:</b></p><p>Commonly, people have trouble drawing recognizable figures or
                signatures with a conventional pointing device like a mouse or track ball.
                Hence, a reasonable implementation of XForms might not want this feature, hence the
                "MAY" here for generic pointing
                devices</p></div></li>
        <li>
          <p>Implementations with specific audio recording capabilities SHOULD support
            <em>record</em>--in-place recording of an audio clip, when the mediaType is
            "audio/*" or "audio/basic". Other mediaTypes besides "audio/basic" MAY share this
            input method.</p>
        </li>
        <li>
          <p>Implementations with a digital camera/scanner interface SHOULD support
            <em>send image</em>--in-place upload of images from an attached device, when the
            mediaType is "image/*" or "image/jpeg". Other mediaTypes besides "image/jpg" MAY
            share this input method.</p>
        </li>
        <li>
          <p>Implementations with video recording capability SHOULD provide a "record"
            option for video/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations with 3d capabilities SHOULD provide a 3d interface option
            for model/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations MAY provide proprietary implementations (for example, a
            mediaType of text/rtf could invoke an edit window with a proprietary word
            processing application)</p>
        </li>
        <li>
          <p>Implementations are encouraged to support other input devices not
            mentioned here.</p>
        </li>
        </ul>
      
      <div class="example">
<h5>Example: XML Representation: &lt;<code>uploadMedia</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia
  (common attributes)
  mediaType = list of content types
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/uploadMedia&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a><br><b>mediaType = list of media types</b> - list of suggested media types, used by the XForms Processor to determine which input methods apply.</p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-selectOne"></a>1.5 selectOne</h3><p>Description: This form control allows the user to make a single selection from multiple choices.</p><p>Typically, a stylesheet would be used to determine
        the exact appearance of form controls, though a
        means is provided to make a concrete selection
        through an attribute.  The value of the attribute
        consists of one of the following values, each of
        which may have a platform-specific behavior:</p>

      <blockquote><p>
         radioGroup
        <br>checkboxGroup
        <br>pulldown
        <br>listbox 
        <br>comboGroup
      </p></blockquote><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="icecream/flavor"&gt;
  &lt;caption&gt;Flavor&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="vanilla"&gt;Vanilla&lt;/item&gt;
    &lt;item value="strawberry"&gt;Strawberry&lt;/item&gt;
    &lt;item value="chocolate"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;</pre></td></tr></table>

        <p>
          In the above example, selecting one of the choices will result in the associated <code>value</code>
          given by attribute <code>value</code> on the selected item being set in the underlying data instance at the location <code>icecream/flavor</code>.
          The <code>value</code>s given in the user interface shown above may be used in constructing a default schema if no schema is provided by the XForms author.
        </p>

        

        
        <p>A graphical browser might render this form control as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
            <tr><td><img src="images/ui-selectOne-listbox.png" alt="a list control, Vanilla, Strawberry, and Chocolate visible; Strawberry selected"></td><td><img src="images/ui-selectOne-checkbox.png" alt="checkboxes, Vanilla, Strawberry, Chocolate; Chocolate is selected"></td><td><img src="images/ui-selectOne-radio.png" alt="radio buttons, Vanilla, Strawberry, Chocolate; Strawberry is selected"></td><td><img src="images/ui-selectOne-pulldown.png" alt="a collapsed pull-down list; Vanilla is selected"></td></tr></tbody></table><p>Data Binding Restrictions: This form control will select the lexical value from the <code>value</code> attribute (or in the absence of such an attribute, the text content of the <code>item</code> element) of the single item selected. If the datatype bound to this form control does not permit the selected value (for instance a datatype of <code>xsd:decimal</code> with an attribute <code>value="abc"</code>), the form control with that selection will be perpetually considered invalid and it will not be possible to submit the form. Authors are encouraged to avoid this situation.</p><p>If the datatype bound to this form control includes a non-enumerated value space (for instance <code>xsd:string</code>, or <code>xsd:string</code> as part of a union), or if the "comboGroup" UI hint is specified, the form control then should allow free data entry, as described in <a href="#"><b>???</b></a>, in addition to the behavior defined here.</p><div class="issue"><p class="prefix"><a name="items-specified-elsewhere"></a><b>Issue (items-specified-elsewhere):</b></p><p>Yet to be decided is allowing display and/or storage values located elsewhere to be retrieved from a binding expression.</p></div><p>Some user interface combinations may allow a state of zero selected items, in which case the lexical value of a zero-length string is selected.</p><p>Implementation Hints: 
          User interfaces may choose to render <code>selectOne</code>
          as a pulldown list or group of radio buttons, among other options. The selectUI attribute offers a hint as to which rendering might be most appropriate, although any styling information (such as CSS) should take precedence.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>selectOne</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectOne&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>    selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance
              override
          </p></blockquote>
        </div></div>
  
  <div class="div2">
<h3><a name="ui-selectMany"></a>1.6 selectMany</h3><p>Description: This form control allows the user to make multiple selections from multiple choices.</p>
      
      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany ref="icecream/flavors"&gt;
  &lt;caption&gt;Flavors&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="v"&gt;Vanilla&lt;/item&gt;
    &lt;item value="s"&gt;Strawberry&lt;/item&gt;
    &lt;item value="c"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectMany&gt;</pre></td></tr></table><p>In the above example, more than one flavor can be
          selected, populating the instance data with multiple selections.</p>

        

        
        <p>A graphical browser might render form control
          <code>selectMany </code>as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
              <tr><td><img src="images/ui-selectMany-listbox.png" alt="list-box; Vanilla, Strawberry, and                                Chocolate visible; Strawberry and Chocolate                                selected"></td><td><img src="images/ui-selectMany-checkbox.png" alt="checkboxes, Vanilla, Strawberry, and                                                             Chocolate; Strawberry and Chocolate                                                             selected"></td><td><img src="images/ui-selectMany-radio.png" alt="Radio buttons, Vanilla, Strawberry, and                                                                                          Chocolate; Strawberry and Chocolate                                                                                          selected"></td><td>N/A</td></tr></tbody></table>
        <p>Data Binding Restrictions: When zero or one items are selected, this form control behaves exactly like <code>selectOne</code> with regard to the lexical value that is selected. When multiple items are selected, the lexical value is a space-separated list of the selected values. The datatype bound to this form control must be capable of supporting this format, typically a Schema list type. Cases where each of the multiple selections appear in the instance data attached to a separate element are handled through the <code>repeat</code> construction (<a href="#"><b>???</b></a>).</p><div class="note"><p class="prefix"><b>Note:</b></p><p>A limitation of the Schema list datatypes is that whitespace characters in the storage values (the <code>value="..."</code> attribute of the <code>item</code> element) are always interpreted as separators between individual data values. Therefore, authors should avoid using whitespace characters within storage values.</p><p>For instance, the following incorrect item declaration:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item value="United States of America"&gt;USA&lt;/item&gt;</pre></td></tr></table><p>when selected, would introduce not one but four additional selection values: "America", "of", "States", and "United".</p></div><p>Implementation Hints: An accessibility aid might allow the user to browse
          through the available choices  and leverage
          the grouping of choices in the markup to
          provide enhanced navigation through long lists
          of choices.</p><div class="example">
          
<h5>Example: XML Representation: &lt;<code>selectMany</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectMany&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance override</p></blockquote>
        </div></div><div class="div2">
<h3><a name="ui-selectBool"></a>1.7 selectBoolean</h3><p>Description: This form control represents an on/off or true/false or yes/no (or similar) choice.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean ref="questionnaire/married"&gt;
  &lt;caption&gt;Are you married?&lt;/caption&gt;
  &lt;help&gt;We need this to determine your tax allowance&lt;/help&gt;
  &lt;choices&gt;
    &lt;item value="true"&gt;Yes&lt;/item&gt;
    &lt;item value="false"&gt;No&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table><p>Data Binding Restrictions: This form control produces only two possible lexical values: <code>true</code> or <code>false</code>. To be considered valid, the datatype bound to this form control (typically <code>xform:boolean</code>) must be able to accept these two lexical values.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Scenarios where the desired lexical value is anything other than 'true'/'false' are not suitable for the <code>selectBoolean</code> form control.</p><p>For example, if the values placed into the instance data were required to be either "male" or "female", the <code>selectOne</code> form control should be used instead.</p></div><p>Implementation Hints: Visual implementations would typically render this as a checkbox. In some cases, like the above example or in aural environments, it may be helpful to provide labels for the respective choices. This is accomplished through the <code>choices</code> mechanism, similar to the other <code>select...</code> form controls.</p><div class="example">
<h5>Example: XML Representation:
            &lt;<code>selectBoolean</code>&gt;</h5> <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean
  (common attributes )
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>selectUI = (TBD)</b></p></blockquote>
        </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-range"></a>1.8 range</h3><p>Description: This form control allows selection from a continuous range of values.</p>

      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range ref="/stats/balance" start="-2.0" end="2.0" stepSize="0.5"&gt;
  &lt;caption&gt;Balance:&lt;/caption&gt;
&lt;/range&gt;</pre></td></tr></table><p>A graphical browser might render this as follows:</p>
  <p><img src="images/ui-range.png" alt="a slider control, from -2 to +2"></p>
  <p>Data Binding Restrictions: Only datatypes  which represent a continuous range where
   it is possible to express a difference value can be bound to this form control.
   (For instance, <code>xform:decimal</code> would be fine, while <code> xform:string</code>
   or <code>xform:..Binary</code> would not). In terms of Schema datatypes, the datatype must
   be either 1) have a total order relationship, or 2) an overall partial order relationship,
   but totally ordered within the range specified between the <code>start</code> and <code>end</code>
   attributes. </p>
   <div class="issue"><p class="prefix"><a name="enum-range"></a><b>Issue (enum-range):</b></p><p>Should an enumeration be allowed to bind to this form control?
   If yes, how should it be ordered?</p></div>
   
   <p>Implementation Hints: In graphical environments, this form control would typically be
   rendered as a "slider" or "volume control".</p><p>Notice that the attributes
   of this element encapsulate sufficient metadata that in
        conjunction with the type information 
        available from the XForms Model proves sufficient to produce
        meaningful prompts when using modalities like speech,
        e.g., when using an accessibility aid.
        Thus, an Aural CSS enabled user agent might speak a prompt of the
        form 
        <em>Please pick a date in the range January 1, 2001 through
          December 31, 2001.</em>
      </p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>range</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range
  (common attributes)
  start = datavalue
  end = datavalue
  stepSize = datavalue-difference
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/range&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>start = datavalue</b> - 
            Lexical starting bound for the range, of the
            same datatype bound to the form control
          <br><b>end = datavalue</b> - Lexical ending bound for the range, of the same datatype bound to the form control<br><b>stepSize = datatype-difference</b> - Prefered step-size to use  for incrementing or
            decrementing the value within the form
            control, of a datatype that can express the difference between two values of the datatype bound to the form control</p></blockquote>
      </div>

      
      
      </div><div class="div2">
<h3><a name="ui-button"></a>1.9 button</h3><p>Description: This form control is similar to the XHTML
        element of the same name and allows for
        user-triggered actions. This form control may also be used to
        advantage in realizing other custom form controls.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button&gt;
Example unavailable at time of publication
&lt;/button&gt;</pre></td></tr></table><p>Data Binding Restrictions:</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Binding a model item has no direct effect on a button, but provides a context for any event handlers that are attached.</p></div><p>Implementation Hints: Graphical implementations would typically render this form control as a push-button.</p>

      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>button</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/button&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-output"></a>1.10 output</h3><p>Description: This form control renders a value from the instance data, but provides no means for entering or changing data. 
        This form control may be used in a <code>caption</code>,
        for instance,  when authors want to say: "I charged you <em>value</em> - and here is 
          why.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>I charged you
&lt;output ref="order/totalPrice"/&gt;
and here is why:</pre></td></tr></table>
      

      
      <p>A graphical browser might render an output form control as follows:</p>

      <p><img src="images/ui-output.png" alt="average-looking text, reading 'I charged you                   100.0 - and here is why:'"></p>
      <p>Data Binding Restrictions: The lexical value of the datatype bound to this form control is displayed, after processing as described in <a href="#"><b>???</b></a>.</p><p>Implementation Hints: An audio browser might apply  properties to this form control to
        <em>aurally highlight</em>
        the displayed value to provide audio formatted output.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>output</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;output
 id = xsd:ID
 ref = binding-expression
 xform = instance data selector
 format = formatting-expression
&gt;
  &lt;!-- empty content --&gt;
&lt;/output&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>id = xsd:ID</b> - Optional unique identifier used for linking.<br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a><br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.<br><b>format = formatting-expression</b> - Optional format specifier</p></blockquote>
      </div><table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">We need to decide on how we define attribute
          <code>format</code> on form control
          <code>output</code>.
          The functionality needed is similar to what
          functions like <code>printf</code> typically
          take.</td></tr></table></div><div class="div2">
<h3><a name="ui-submit"></a>1.11 submit</h3><p>Description: This form control submits all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit xform="timecard"&gt;
  &lt;caption&gt;Submit&lt;/caption&gt;
&lt;/submit&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>submit()</code> method.</p><div class="example">
<h5>Example: XML
          Representation: &lt;<code>submit</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/submit&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-reset"></a>1.12 reset</h3><p>Description: This form control resets to the initial values all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset ref="/tcard/data" xform="timecard"&gt;
  &lt;caption&gt;Reset totals&lt;/caption&gt;
&lt;/reset&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>reset()</code> method.</p><div class="example">
        
<h5>Example: XML Representation:
          &lt;<code>reset</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/reset&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  
  
<div class="div2">
    
<h3><a name="ui-common"></a>1.13 Common Markup</h3>
    
    <p>
      The preceding form control definitions make reference to several child elements and attributes that are common to several of the XForms form controls. This section defines these common markup components.</p>

    <div class="div3">
      
<h4><a name="ui-common-attributes"></a>1.13.1 Common Attributes</h4>
      <div class="issue"><p class="prefix"><a name="XHTML-attrs"></a><b>Issue (XHTML-attrs):</b></p><p>XHTML defines two attributes on element
          <code>html:form</code>--<code>accept</code>
          and <code>accept-charset</code>. Additionally, attribute
          <code>accept-charset</code> also appears on element
          <code>html:input</code>.
          We need to bring the equivalent to these into the XForms specification.</p></div>
      <div class="example">
        
<h5>Example: XML Representation: Common Attributes</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>xmlns = xsd:anyURI
xml:lang = xsd:language
id = xsd:ID
class = space separated list of classes
style = associated style info
ref = binding-expression
xform = xsd:IDREF
navIndex = xsd:nonNegativeInteger : 0
accessKey = xsd:token</pre></td></tr></table>
        <blockquote><p> 
          <b>xmlns = xsd:anyURI</b> - Optional standard XML attribute for identifying an XML namespace.
          <br><b>xml:lang = xsd:language</b> - Optional standard XML attribute to specify a human language for this element.
          <br><b>id = xsd:ID</b> - Optional unique identifier used for linking.
          <br><b>class = space separated list of classes</b> - Optional selector for a style rule.
          <br><b>style = associated style info</b> - Optional inline style specification.
          <br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a>. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>navIndex = xsd:nonNegativeInteger : 0</b> - Optional attribute is a non-negative integer in the range of 0-32767 used 
            to define the navigation sequence. This gives the author control over the 
            sequence in which <a title="" href="#">form control</a>s 
            are traversed. The default navigation order is specified in the chapter <a href="#"><b>???</b></a>.<br><b> accessKey = xsd:string</b> - Optional attribute defines a shortcut for moving the input focus directly 
            to a particular <a title="" href="#">form control</a>. 
            The value of this is typically a single character which when pressed together 
            with a platform specific modifier key (e.g. the <em>alt</em> key) results 
            in the focus being set to this <a title="" href="#">form 
              control</a>.
          
        </p></blockquote>
      </div>
      
      <p>
        CSS properties for controlling the look and feel of
        XForms form controls are being defined in
        conjunction with the CSS Working Group.  This version
        of the XForms working draft defines the XForms form controls independent of visual
        presentation. Additionally, sample default
        visual presentations are shown for each form control
        defined in this Working Draft.  The CSS Working Group
        has agreed to help us develop a default CSS stylesheet
        capable of producing the sample default renderings
        illustrated in this working draft.  The results of the
        above will be used to document the use of CSS
        properties within XForms user interface elements for
        the final version of the XForms specification.</p>

      
    </div>
    <div class="div3">
      
<h4><a name="ui-common-elements"></a>1.13.2 Common Child Elements</h4>
      
      <p>
        Child elements <code>caption</code>, <code>help</code> and
        <code>hint</code> detailed below provide the ability to attach human-readable
        metadata to XForms form controls.
      </p>

      
      <p>Instead of supplying such metadata e.g., the label
        for a form control, as inline content of
        the contained element <code>caption</code>, the metadata can be
        pointed to by using a simple XLink attribute
        <code>xlink:href</code> on element <code>caption</code> (or <code>hint</code> or <code>help</code>).
        Notice that systematic use of this feature can be
        exploited in internationalizing XForms user interfaces
        by:
        
      </p>

      <ul><li><p>Factoring all human readable
            messages to a separate
            resource XML file.</p></li><li><p>Using URIs into this XML resource
            bundle within individual caption
            elements</p></li><li><p>Finally, an XForms
            processor can use content negotiation to obtain the
            appropriate XML resource bundle,
            e.g., based on the <code>accept-language</code>
            headers from the client, to serve up the user
            interface with messages localized to the
            client's locale.</p></li></ul><div class="div4">
        
<h5><a name="ui-common-elements-caption"></a>1.13.2.1 caption</h5>
        
        <p>The required element <code>caption</code>  labels the containing form control with
          a descriptive label. Additionally, the caption makes it possible
          for someone who can't see the form control to
          obtain a short description while navigating
          between form controls.</p>


        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>caption</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;caption
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/caption&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes</b> defined in
              <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        <p>An accessibility aid would typically speak the metadata
          encapsulated in element <code>caption</code> when the
          containing form control gets focus.</p>
      </div>
      <div class="div4">
        
<h5><a name="ui-common-elements-help"></a>1.13.2.2 help</h5>
        
        <p>
          The optional element <code>help</code> provides a longer
          description that will help users  understand how
          to fill out this <a title="" href="#">form control</a>.
          The <code>help</code> text will   be shown only
          on request.</p>

        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>help</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;help
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/help&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        
        <p>A graphical browser might render help as follows:</p>

        <p><img src="images/ui-password-with-help.png" alt="a                     password entry field, with a popup window below,                     displaying instructions for retrieving a forgotton                     password"></p><p>An accessibility aid might speak this
          information upon request.</p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-hint"></a>1.13.2.3 hint</h5>
        
        <p>
          The optional element <code>hint</code> provides a short
          hint for the user, typically represented as a
          tooltip by graphical user agents.  The tooltip
          text will normally be shown when the user remains
          on the form control for more than a certain length
          of time.  Accessibility aids might render such
          tooltips using speech. This element is optional,
          and its content model is mixed.</p>

        <div class="example">
          
<h5>Example: XML Representation:
            &lt;<code>hint</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;hint
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/hint&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
        </div>

        
        <p>A graphical browser might render hints as follows:</p>

        <p><img src="images/ui-textbox-with-hint.png" alt="an average-looking text entry field, with a mouse pointer visible and a tooltip below, reading 'Please enter the number and street name'"></p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-onevent"></a>1.13.2.4 onevent</h5>
        
        <p>
          This element can be used to bind event handlers to
          form controls. It is defined in <a href="#">[ref-xhtml-events]</a>. Details on XForms events
          can be found in the chapter
          <a href="#"><b>???</b></a>.</p>

        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>onevent</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;onevent
  (attributes defined in XHTML Events)
&gt;
  &lt;!-- Action handlers --&gt;
&lt;/onevent&gt;</pre></td></tr></table>
        </div>
        <p>
          Element <code>onevent</code> is defined in the XHTML Events
          module.
          It declares   an event listener 
          by specifying the event  to handle  and the event handler to
          invoke.</p>
      </div>
      
    <div class="div4">
<h5><a name="ui-common-elements-item"></a>1.13.2.5 item</h5>

        <p>This element is used within list form controls to represent a single item of the list.</p>
        <div class="issue"><p class="prefix"><a name="onevent-for-item"></a><b>Issue (onevent-for-item):</b></p><p>Should onevent handlers be allowed here for individual items in a list?</p></div><div class="example">
<h5>Example: XML Representation: &lt;<code>item</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item
  value = lexical-representation
&gt;
  &lt;!-- #PCDATA --&gt;
&lt;/item&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>value = lexical-representation</b> - the "storage value" for the item, to be placed in the instance data when this item is chosen.</p></blockquote>
        </div>
      </div><div class="div4">
<h5><a name="ui-common-elements-choices"></a>1.13.2.6 choices</h5>
        <p>This element is used within list form controls to group items. This provides the same functionality as element <code>optgroup</code> in HTML 4.0.</p>
        <div class="example">
<h5>Example: XML Representation: &lt;<code>choices</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;choices&gt;
  &lt;!-- (item | choices)+ --&gt;
&lt;/choices&gt;</pre></td></tr></table>
          
        </div>
      </div></div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="acks"></a>A Acknowledgements (Non-Normative)</h2> 
<p>The Authors of this document are:</p>
<ul>
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Micah Dubinko 
    , Cardiff 
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li>
  <li> 
    Roland Merrick 
    , IBM 
  </li>
  <li> 
    T. V. Raman 
    , IBM 
  </li>
  <li>
    Linda Bucksay Welsh
    , Intel
     (<i>Until April 2001</i>) 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
    </li>
    <li>
      Rob McDougall 
      , JetForm Corporation 
    </li>
  <li>
    John McCarthy
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Frank Olken
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li>Panagiotis Reveliotis
    , Phillips
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li><li>Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li>
    Dave Raggett
    , W3C/OpenWave
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>
  
  <p>This document was written with the participation of the XForms Working
        Group, which currently consists of the following members:</p> 
<ul> 
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li><li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li><li> 
    Micah Dubinko 
    , Cardiff 
  </li> 
  <li>
    Driss Eddaifi
    , Ecole Mohammadia d'Ing&eacute;nieurs
  </li>
  <li>
    Michalis Petropoulos
    , Enosys Markets, Inc.
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li> 
  <li> 
    Frank Boumphrey 
    , HTML Writer's Guild 
  </li> 
  <li> 
    Roland Merrick 
    , IBM 
  </li><li> 
    T. V. Raman 
    , IBM 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
  </li>
  <li>
    Rob McDougall 
    , JetForm Corporation 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li> 
    Alex Hopmann 
    , Microsoft 
  </li> 
  <li>Dave Hyatt
    , Netscape/AOL
  </li>
  <li> 
    Eric Pollmann 
    , Netscape/AOL 
  </li>
  <li>
    Tom Butcher
    , OpenDesign
  </li> 
  <li> 
    K. P. Lee 
    , Phillips 
  </li> 
  <li> 
    Roli Wendorf 
    , Phillips 
  </li> 
  <li> 
    Ted Wugofski 
    , Openwave 
  </li> 
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li> 
  <li> 
    Dave Manning 
    , PureEdge 
  </li>
  <li>
    Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li> 
    Zoe Lacroix 
    , SurroMed, Inc. 
  </li>
  <li>
    Masayasu Ishikawa
    , W3C
  </li> 
  <li>
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>

<p>The XForms Working Group has benefited in its work from the
        participation and contributions of Invited Experts:</p> 
<ul> 
  <li> 
    Tom Schnetlage 
    , University of Berkeley 
  </li> 
  <li> 
    Dan Gillman 
    , Federal Bureau of Labor Statistics 
  </li> 
  <li> 
    Eliot Christian 
    , U.S. Geological Survey 
  </li>
  <li>
    Mikko Honkala
    , Helsinki University Of Technology
  </li>
</ul>

<div class="note"><p class="prefix"><b>Note:</b></p><p><em>Additional Acknowledgments</em>: The editors would like to thank Kai Scheppe, Malte 
  Wedel and G&ouml;tz Bock for lots of constructive criticism on early versions 
  of the chapter <a href="#"><b>???</b></a> and their contributions to its present content.</p></div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="changes"></a>A Changes from Previous Release (Non-Normative)</h2>
 
  <div class="div2"> 
    
<h3><a name="changes-overall"></a>1 Changes since the 16-Feb-2001 release</h3> 
  <p>There have been significant changes to the XForms since our last public draft. In addition, we have switched over to authoring the specification using xmlspec.dtd from writing raw HTML (details at <a href="#"><b>???</b></a>). The change from hand-authored HTML to xmlspec has introduced changes throughout the document, and consequently, adding diff marks for each change would be excessively distracting and make this appendix difficult to read. Instead, this section summarizes how things have changed so that readers familiar with the previous draft can get up to to speed with the new specification.</p></div> 
<div class="div2">
<h3><a name="changes-about"></a>2 Changes to Chapter 1 'About XForms'</h3><p>The typographic samples have been updated to work better with the XMLspec publishing system.</p></div><div class="div2">
<h3><a name="changes-concepts"></a>3 Changes to Chapter 2 'Concepts'</h3><p>This chapter has been completely updated. The new version contains a samples of complete forms and a step-by-step guide through the most common functionality in XForms.</p></div><div class="div2">
<h3><a name="changes-terms"></a>4 Changes to Chapter 3 'Terminology'</h3><p>Terms have been cleaned-up and brought into line with the rest of the document. The term "datatype" has been imported from XML Schema. The terms "computed expression", "containing document", and "model item property" are new.</p></div><div class="div2">
<h3><a name="changes-datatypes"></a>5 Changes to Chapter 4 'Datatypes'</h3><p>The Working Group has decided to more directly reference XML Schema datatypes, hence this chapter has been restructured to include by reference Schema datatypes, and define any additional types. Remaining issues are listed within the chapter.</p></div><div class="div2">
<h3><a name="changes-model"></a>6 Changes to Chapter 5 'XForms Model'</h3><p>Removed all "simple syntax". Clarified how computed model item properties (including calculate) work. Improved terminology, consistently using terms from chapter 3.</p><p>Open and closed enumerations are now under separate headings. Removed 'group' to UI chapter. Renamed "Arrays" section to "Multiple Simultaneous Values", and added section "Repeating Line Items". Renamed "Switch" to "Alternate Representation", with a pointer to the UI section.</p><p>Significant changes to this chapter, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-expr"></a>7 Changes to Chapter 6 'XPath Expressions in XForms'</h3><p>This chapter was previously named "Dynamic Constraint Language". The new title more accurately describes both the chapter and the role of XPath within XForms. The term "Dynamic Constraints Language" has been removed throughout the remainder of the document as well.</p><p>New introductory material describes the various ways XPath is used throughout XForms. The "Instance Data" section formerly residing in the Processing Model chapter is now in this chapter. The section on Datatypes now describes which parts of XForms use XPath datatypes and which use XML Schema datatypes.</p><p>The BNF productions have been removed, in favor of stronger wording that XPath is to be used directly.</p><p>The section "Evaluation Context" has been more thoroughly cross-checked against the XPath specification, with several underspecified areas now addressed.</p><p>The large set of custom operators has been replaced with a NOTE referencing the built-in XPath operators.</p><p>New functions defined--<code>count-non-empty(node-set)</code>, and <code>xforms-property(string)</code>.</p><p>Several of the functions have been specified in greater detail.</p><p>The extensibility section now makes a reference to a possible direction--the <code>element-available()</code> and <code>function-available()</code> functions.</p></div><div class="div2">
<h3><a name="changes-controls"></a>8 Changes to Chapter 7 'Form Controls'</h3><p>Originally part of the chapter "XForms User Interface". Now split into a separate chapter. The material in this new chapter has been restructured for readability.</p><p>The "Design Input" section has been removed. Further details are available in the XForms Requirements document.</p><p> 

 

Note that names of form controls have changed, but are  not yet cast in stone. The following changes and additions have been made to the core form controls:

</p><blockquote><p>hidden has been removed as a form control<br>output, textbox, submit, and reset  have kept their same names<br>exclusiveSelect and multipleSelect have been renamed selectOne and selectMany<br>checkbox is now selectBoolean<br>password is now secret<br>button has been fleshed out, including event listener details<br>uploadMedia and range are new form controls in this Working Draft</p></blockquote><p>The "AnyControl" is now described in prose instead of formally. In addition, there are minimal changes to the common elements and attributes defined in this section. Element onevent is now taken from the XHTML Events module and is therefore no longer defined in detail in this specification. A later section defines XForms-specific event handlers for use within event listeners declared via element onevent.</p></div><div class="div2">
<h3><a name="changes-ui"></a>9 Changes to Chapter 8 'XForms User Interface'</h3><p>The section "Future Work" has been removed.</p><p>The specification now  introduces constructs for authoring conditional user interfaces (see switch) and a construct for authoring repeating widgets (see repeat) for use in creating purchase orders or shopping carts that wish to create the user interface needed for populating repeating rows from a table.</p><p>Conditional User Interfaces: 
This is a new section, and defines construct switch along with its associated event handlers.</p><p>New Construct repeat:
There is a new section that defines construct repeat for authoring things like shopping carts where the user interface for populating a structure needs to be repeated multiple times.</p><p>UI  Templates: 
Constructs for creating and using user interface templates have been renamed for consistency. The new element names are uiTemplate and useUITemplate.</p><p>Constructing High-level User Interfaces:
The content pertaining to creating higher-level user interfaces from the basic building blocks has been substantially reorganized. This portion of the specification first defines construct group used to group user interface controls. Element group no longer defines an XForms-specific layout model; instead all layout attributes come from CSS. This enables XForms user interfaces to be laid out using either CSS or XSL:FO, or for that matter languages such as SVG.</p><p> 

Subforms And Subpages:
With the XForms constructs for authoring higher level user interaction now fleshed out, it turns out that there is no need for an XForms-specific subform or subpage construct --we can leverage existing mechanisms such as group and more generally, XHTML's div elements for this purpose.</p></div><div class="div2">
<h3><a name="changes-binding"></a>10 Changes to Chapter 9 'Binding'</h3><p>Some of the text has been cleaned up with regard to the relationship with XPath, but otherwise no significant content changes.</p></div><div class="div2">
<h3><a name="changes-structure"></a>11 Changes to Chapter 10 'Document Structure'</h3><p>This chapter was previously named "Using XForms with Other Document Types". Added new section "Integration with XLink". Updated examples to reflect xlink namespace. </p></div><div class="div2">
<h3><a name="changes-rpm"></a>12 Changes to Chapter 11 'Processing Model and Conformance'</h3><p>Cleaned up terminology and brought into greater consistency with the rest of the document.</p><p>Removed the <code>locale</code> property; separated the rest into those that can vary from one <code>xform</code> element to the next, and those that are the same across the containing document. Renamed <code>use-nulls</code> to <code>use-nil</code>.</p><p>The "suspend" functionality has been removed, including the <code>xforms-suspend</code> event, and will appear in a post-1.0 version of XForms. The <code>xforms-resume</code> event has been renamed <code>xforms-initialize</code>. Clarified that model items are associated with only a single value.</p><p>The "instance data" section has moved to the XPath Expressions chapter, though rules for constructing instance data are still in this chapter, and reworded for clarity.</p><p>The multipart/form-data section has been replaced with a reference to RFC 2388.</p><p>An early  conformance section has been added.</p></div><div class="div2">
<h3><a name="changes-schema"></a>13 Changes to Appendix  'Schema for XForms'</h3><p>For this release, the Schema only covers the XForms form controls and the Document Structure markup.</p><p>Significant changes to this appendix, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-xslt"></a>14 Changes to Appendix 'XSLT from Simple Syntax'</h3><p>Following the Working Group decision to remove the simple syntax, this appendix has also been removed.</p></div><div class="div2">
<h3><a name="changes-samples"></a>15 Change to Appendix 'Sample Forms'</h3><p>Sample forms have been incorporated into <a href="#"><b>???</b></a></p></div><div class="div2">
<h3><a name="changes-optional"></a>16 Changes to Appendix 'Optional Function Library'</h3><p>The Working Group has decided to remove all optional functions from XForms.</p></div><div class="div2">
<h3><a name="changes-references"></a>17 Changes to Appendix 'References'</h3><p>References have been updated to refer to the changes in document status, most notably the XML Schema recommendation. New normative reference to XLink, RFC2388; informative reference to T. V. Raman's book on auditory user interfaces. Removed orphaned references to ISO 8601, RFC 2369, RFC 2141 and moved  the orphaned Unicode reference to the informative section.</p></div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="controls"></a>1 Form Controls</h2>
  <div class="div2">
    
<h3><a name="ui-intro"></a>1.1 Introduction</h3>
    
    <p>
      XForms User Interface controls, also called <a title="" href="#">form control</a>s, are declared using
      markup elements, and their behavior refined via
      markup attributes. This markup may be further
      decorated with style properties that can be set
      using CSS stylesheets to deliver a customized look
      and feel. Form controls defined
      here are bound to the underlying instance data
      using the <a title="" href="#">binding</a> attributes as defined in the
      chapter <a href="#"><b>???</b></a>.</p>

    
    <p>
      The XForms form controls enable
      accessibility by taking a uniform approach to such
      features as captions, help text, tabbing and keyboard
      shortcuts.  Internationalization issues are being
      addressed in conjunction with the Internationalization
      Working Group and are addressed by following the same
      design principles as within the rest of XHTML. All form controls defined here are suitable for implementation as Aural CSS (ACSS) form controls.</p>

    <p>
        Several XForms form controls are of a general class that represent the concept of
        selecting from available choices.  Such selection
        controls can be characterized along a presentational
        dimension that is completely orthogonal to the
        functional distinction.  Distinguishing the
        <em>presentational</em> from the
        <em>functional</em> dimension allows the
        expression of the <em>meaning</em> of a
        particular form control--see <a href="#">[aui-conversational-gestures]</a> for a definition
        of such high-level  user interaction primitives.</p>
      

      <p>This chapter includes non-normative graphical
      examples of many form controls.
      The CSS Working Group is providing assistance with creating
      default CSS rules for producing visual renderings 
      of standard XForms form controls. This
      specification will also include non-normative rules for
      how these same controls might be rendered to alternative
      access modalities.</p><div class="issue"><p class="prefix"><a name="control-names"></a><b>Issue (control-names):</b></p>
      <p>All form control names listed here should be considered advisory until further consensus is reached in the Working Group.</p>
    </div><p>For each form control, the following aspects will be defined:</p>

  <blockquote><p>Description<br>Examples<br>Data Binding Restrictions<br>Implementation Hints<br>XML Representation</p></blockquote><p>The form controls defined here use common attributes and elements that are defined later in this chapter (<a href="#"><b>???</b></a>).</p></div>
  
  <div class="div2">
<h3><a name="ui-entry"></a>1.2 textbox</h3><p>Description: This form control enables free-form data entry.</p><p>Examples:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox ref="order/shipTo/street" style="width:xx; height:xx"&gt;
 &lt;caption&gt;Street&lt;caption&gt;
 &lt;help&gt;Please enter the number and street name&lt;/help&gt;
&lt;/textbox&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes <code>height</code>
        and <code>width</code>
        specify the display size of the form control. Note
        that the constraints on how much text can be input are
        obtained from the underlying XForms Model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render the above example as follows:</p>

      <p><img src="images/ui-textbox.png" alt="an average-looking text entry field. The title, 'street' has been automatically aligned to the left"></p>
    <p>Data Binding Restrictions: The entered value of the form control (after processing as described in <a href="#"><b>???</b></a>) is treated as a lexical value. A datatype bound to this form control will be treated as a restriction upon the allowed entered value.</p><p>Implementation Hints: Implementations may represent this form control with more than one native user interface control, for example a form control that appears to be three separate smaller entry fields for "day", "month", and "year" for a date datatype. Further, for date datatypes, a calendar system for data entry may be used, including non-Gregorian calendar systems. For numeric datatypes, additional features might include spin buttons or other conveniences. When bound to a datatype that accepts newline characters, this form control should accept multi-line input.</p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>textbox</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/textbox&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes</b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  <div class="div2">
<h3><a name="ui-secret"></a>1.3 secret</h3><p>Description: This form control is used for obtaining   information that is considered sensitive, and thus  not echoed
        to a visual or aural display as it is being entered, e.g., password entry.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret ref="/login/password" style="width:xx; height:xx"&gt;
  &lt;caption&gt;Please enter your password --it will not be visible as you type.&lt;caption&gt;
&lt;/secret&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes
        <code>height</code> and <code>width</code> specify
        the display size of the form control. Note that
        the constraints on how much text can be input are
        obtained from the underlying XForms model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render this form control
        as follows:</p>

      <p><img src="images/ui-password.png" alt="an                   average-looking text entry field, with '*'                   characters where the text would be                   expected"></p>
      <p>Data Binding Restrictions: Identical to <code>textbox</code>.</p><p>Implementation Hints: In general,  implementations, including accessibility aids, would render a "*" or similar character instead of  the actual characters entered, and thus would  not render the entered value of this form control. Note that this provides only a casual level of security; truly sensitive information will require additional security measures outside the scope of XForms.</p><div class="example">
<h5>Example: XML Representation
          &lt;<code>secret</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/secret&gt;</pre></td></tr></table>
        <blockquote><p>

          <b>common attributes</b> defined 
            in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-uploadMedia"></a>1.4 uploadMedia</h3><p>Description: This form control enables the common feature of Web sites to upload a file from the local file system, as well as accepting input from various devices including microphones, pens, and digital cameras.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia ref="mail/attach1" mediaType="image/*"&gt;
  &lt;caption&gt;Select image:&lt;/caption&gt;
&lt;/upload&gt;</pre></td></tr></table>
      
      

      
      <p>A graphical browser might render this form control as follows:</p>

      <p><img src="images/ui-upload.png" alt="A drop-down box; main display reads 'Select Image:' with a cutesey icon. The drop-down                   itself has three items: (icon)-From Scanner or Camera...; (icon)-Scribble...; Browse..."></p>
      <p>Data Binding Restrictions:  This form control can only be bound to datatypes <code>xsd:base64Binary</code> or <code>xsd:hexBinary</code>, or types derived by restriction from these.</p><p>Implementation Hints:</p><ul>
        <li>
          <p>Implementations with a file system SHOULD support "file upload"--selecting a specific file, for all mediaTypes. The types of files presented
            by default MUST reflect the mediaType specified in the XForms Model, for
            example defaulting to only audio file types in the file dialog when the
            mediaType is "audio/*". In XForms 1.0, there is a 1:1 binding between a
            uploadMedia form control and one of the <code>xform:binary</code> datatypes, although that
            single file may be compound (e.g. application/zip).</p>
        </li>
        <li>
          <p>Implementations with specific pen/digitizer hardware SHOULD (and
            implementations with other pointing devices MAY) support "scribble"--allowing in-place creation of pen-based PNG image data, when the mediaType
            is "image/*" or "image/png". Other mediaTypes besides image/png MAY share this
            input method.</p>
        <div class="note"><p class="prefix"><b>Note:</b></p><p>Commonly, people have trouble drawing recognizable figures or
                signatures with a conventional pointing device like a mouse or track ball.
                Hence, a reasonable implementation of XForms might not want this feature, hence the
                "MAY" here for generic pointing
                devices</p></div></li>
        <li>
          <p>Implementations with specific audio recording capabilities SHOULD support
            <em>record</em>--in-place recording of an audio clip, when the mediaType is
            "audio/*" or "audio/basic". Other mediaTypes besides "audio/basic" MAY share this
            input method.</p>
        </li>
        <li>
          <p>Implementations with a digital camera/scanner interface SHOULD support
            <em>send image</em>--in-place upload of images from an attached device, when the
            mediaType is "image/*" or "image/jpeg". Other mediaTypes besides "image/jpg" MAY
            share this input method.</p>
        </li>
        <li>
          <p>Implementations with video recording capability SHOULD provide a "record"
            option for video/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations with 3d capabilities SHOULD provide a 3d interface option
            for model/* mediaTypes.</p>
        </li>
        <li>
          <p>Implementations MAY provide proprietary implementations (for example, a
            mediaType of text/rtf could invoke an edit window with a proprietary word
            processing application)</p>
        </li>
        <li>
          <p>Implementations are encouraged to support other input devices not
            mentioned here.</p>
        </li>
        </ul>
      
      <div class="example">
<h5>Example: XML Representation: &lt;<code>uploadMedia</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;uploadMedia
  (common attributes)
  mediaType = list of content types
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/uploadMedia&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a><br><b>mediaType = list of media types</b> - list of suggested media types, used by the XForms Processor to determine which input methods apply.</p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-selectOne"></a>1.5 selectOne</h3><p>Description: This form control allows the user to make a single selection from multiple choices.</p><p>Typically, a stylesheet would be used to determine
        the exact appearance of form controls, though a
        means is provided to make a concrete selection
        through an attribute.  The value of the attribute
        consists of one of the following values, each of
        which may have a platform-specific behavior:</p>

      <blockquote><p>
         radioGroup
        <br>checkboxGroup
        <br>pulldown
        <br>listbox 
        <br>comboGroup
      </p></blockquote><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne ref="icecream/flavor"&gt;
  &lt;caption&gt;Flavor&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="vanilla"&gt;Vanilla&lt;/item&gt;
    &lt;item value="strawberry"&gt;Strawberry&lt;/item&gt;
    &lt;item value="chocolate"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectOne&gt;</pre></td></tr></table>

        <p>
          In the above example, selecting one of the choices will result in the associated <code>value</code>
          given by attribute <code>value</code> on the selected item being set in the underlying data instance at the location <code>icecream/flavor</code>.
          The <code>value</code>s given in the user interface shown above may be used in constructing a default schema if no schema is provided by the XForms author.
        </p>

        

        
        <p>A graphical browser might render this form control as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
            <tr><td><img src="images/ui-selectOne-listbox.png" alt="a list control, Vanilla, Strawberry, and Chocolate visible; Strawberry selected"></td><td><img src="images/ui-selectOne-checkbox.png" alt="checkboxes, Vanilla, Strawberry, Chocolate; Chocolate is selected"></td><td><img src="images/ui-selectOne-radio.png" alt="radio buttons, Vanilla, Strawberry, Chocolate; Strawberry is selected"></td><td><img src="images/ui-selectOne-pulldown.png" alt="a collapsed pull-down list; Vanilla is selected"></td></tr></tbody></table><p>Data Binding Restrictions: This form control will select the lexical value from the <code>value</code> attribute (or in the absence of such an attribute, the text content of the <code>item</code> element) of the single item selected. If the datatype bound to this form control does not permit the selected value (for instance a datatype of <code>xsd:decimal</code> with an attribute <code>value="abc"</code>), the form control with that selection will be perpetually considered invalid and it will not be possible to submit the form. Authors are encouraged to avoid this situation.</p><p>If the datatype bound to this form control includes a non-enumerated value space (for instance <code>xsd:string</code>, or <code>xsd:string</code> as part of a union), or if the "comboGroup" UI hint is specified, the form control then should allow free data entry, as described in <a href="#"><b>???</b></a>, in addition to the behavior defined here.</p><div class="issue"><p class="prefix"><a name="items-specified-elsewhere"></a><b>Issue (items-specified-elsewhere):</b></p><p>Yet to be decided is allowing display and/or storage values located elsewhere to be retrieved from a binding expression.</p></div><p>Some user interface combinations may allow a state of zero selected items, in which case the lexical value of a zero-length string is selected.</p><p>Implementation Hints: 
          User interfaces may choose to render <code>selectOne</code>
          as a pulldown list or group of radio buttons, among other options. The selectUI attribute offers a hint as to which rendering might be most appropriate, although any styling information (such as CSS) should take precedence.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>selectOne</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectOne
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectOne&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>    selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance
              override
          </p></blockquote>
        </div></div>
  
  <div class="div2">
<h3><a name="ui-selectMany"></a>1.6 selectMany</h3><p>Description: This form control allows the user to make multiple selections from multiple choices.</p>
      
      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany ref="icecream/flavors"&gt;
  &lt;caption&gt;Flavors&lt;/caption&gt;
  &lt;choices&gt;
    &lt;item value="v"&gt;Vanilla&lt;/item&gt;
    &lt;item value="s"&gt;Strawberry&lt;/item&gt;
    &lt;item value="c"&gt;Chocolate&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectMany&gt;</pre></td></tr></table><p>In the above example, more than one flavor can be
          selected, populating the instance data with multiple selections.</p>

        

        
        <p>A graphical browser might render form control
          <code>selectMany </code>as any of the following:</p>

        <table><tbody><tr><th>listbox</th><th>checkboxGroup</th><th>radioGroup</th><th>pulldown</th></tr>
              <tr><td><img src="images/ui-selectMany-listbox.png" alt="list-box; Vanilla, Strawberry, and                                Chocolate visible; Strawberry and Chocolate                                selected"></td><td><img src="images/ui-selectMany-checkbox.png" alt="checkboxes, Vanilla, Strawberry, and                                                             Chocolate; Strawberry and Chocolate                                                             selected"></td><td><img src="images/ui-selectMany-radio.png" alt="Radio buttons, Vanilla, Strawberry, and                                                                                          Chocolate; Strawberry and Chocolate                                                                                          selected"></td><td>N/A</td></tr></tbody></table>
        <p>Data Binding Restrictions: When zero or one items are selected, this form control behaves exactly like <code>selectOne</code> with regard to the lexical value that is selected. When multiple items are selected, the lexical value is a space-separated list of the selected values. The datatype bound to this form control must be capable of supporting this format, typically a Schema list type. Cases where each of the multiple selections appear in the instance data attached to a separate element are handled through the <code>repeat</code> construction (<a href="#"><b>???</b></a>).</p><div class="note"><p class="prefix"><b>Note:</b></p><p>A limitation of the Schema list datatypes is that whitespace characters in the storage values (the <code>value="..."</code> attribute of the <code>item</code> element) are always interpreted as separators between individual data values. Therefore, authors should avoid using whitespace characters within storage values.</p><p>For instance, the following incorrect item declaration:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item value="United States of America"&gt;USA&lt;/item&gt;</pre></td></tr></table><p>when selected, would introduce not one but four additional selection values: "America", "of", "States", and "United".</p></div><p>Implementation Hints: An accessibility aid might allow the user to browse
          through the available choices  and leverage
          the grouping of choices in the markup to
          provide enhanced navigation through long lists
          of choices.</p><div class="example">
          
<h5>Example: XML Representation: &lt;<code>selectMany</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectMany
  (common attributes)
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectMany&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")</b> - appearance override</p></blockquote>
        </div></div><div class="div2">
<h3><a name="ui-selectBool"></a>1.7 selectBoolean</h3><p>Description: This form control represents an on/off or true/false or yes/no (or similar) choice.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean ref="questionnaire/married"&gt;
  &lt;caption&gt;Are you married?&lt;/caption&gt;
  &lt;help&gt;We need this to determine your tax allowance&lt;/help&gt;
  &lt;choices&gt;
    &lt;item value="true"&gt;Yes&lt;/item&gt;
    &lt;item value="false"&gt;No&lt;/item&gt;
  &lt;/choices&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table><p>Data Binding Restrictions: This form control produces only two possible lexical values: <code>true</code> or <code>false</code>. To be considered valid, the datatype bound to this form control (typically <code>xform:boolean</code>) must be able to accept these two lexical values.</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Scenarios where the desired lexical value is anything other than 'true'/'false' are not suitable for the <code>selectBoolean</code> form control.</p><p>For example, if the values placed into the instance data were required to be either "male" or "female", the <code>selectOne</code> form control should be used instead.</p></div><p>Implementation Hints: Visual implementations would typically render this as a checkbox. In some cases, like the above example or in aural environments, it may be helpful to provide labels for the respective choices. This is accomplished through the <code>choices</code> mechanism, similar to the other <code>select...</code> form controls.</p><div class="example">
<h5>Example: XML Representation:
            &lt;<code>selectBoolean</code>&gt;</h5> <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;selectBoolean
  (common attributes )
  selectUI = ("radioGroup" | "checkboxGroup" | "pulldown" | "listbox" | "comboGroup")
&gt;
  &lt;!-- caption, help?, hint?, onevent?, choices* --&gt;
&lt;/selectBoolean&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
            <br><b>selectUI = (TBD)</b></p></blockquote>
        </div></div>
  
  
  
  <div class="div2">
<h3><a name="ui-range"></a>1.8 range</h3><p>Description: This form control allows selection from a continuous range of values.</p>

      <p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range ref="/stats/balance" start="-2.0" end="2.0" stepSize="0.5"&gt;
  &lt;caption&gt;Balance:&lt;/caption&gt;
&lt;/range&gt;</pre></td></tr></table><p>A graphical browser might render this as follows:</p>
  <p><img src="images/ui-range.png" alt="a slider control, from -2 to +2"></p>
  <p>Data Binding Restrictions: Only datatypes  which represent a continuous range where
   it is possible to express a difference value can be bound to this form control.
   (For instance, <code>xform:decimal</code> would be fine, while <code> xform:string</code>
   or <code>xform:..Binary</code> would not). In terms of Schema datatypes, the datatype must
   be either 1) have a total order relationship, or 2) an overall partial order relationship,
   but totally ordered within the range specified between the <code>start</code> and <code>end</code>
   attributes. </p>
   <div class="issue"><p class="prefix"><a name="enum-range"></a><b>Issue (enum-range):</b></p><p>Should an enumeration be allowed to bind to this form control?
   If yes, how should it be ordered?</p></div>
   
   <p>Implementation Hints: In graphical environments, this form control would typically be
   rendered as a "slider" or "volume control".</p><p>Notice that the attributes
   of this element encapsulate sufficient metadata that in
        conjunction with the type information 
        available from the XForms Model proves sufficient to produce
        meaningful prompts when using modalities like speech,
        e.g., when using an accessibility aid.
        Thus, an Aural CSS enabled user agent might speak a prompt of the
        form 
        <em>Please pick a date in the range January 1, 2001 through
          December 31, 2001.</em>
      </p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>range</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;range
  (common attributes)
  start = datavalue
  end = datavalue
  stepSize = datavalue-difference
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/range&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
          <br><b>start = datavalue</b> - 
            Lexical starting bound for the range, of the
            same datatype bound to the form control
          <br><b>end = datavalue</b> - Lexical ending bound for the range, of the same datatype bound to the form control<br><b>stepSize = datatype-difference</b> - Prefered step-size to use  for incrementing or
            decrementing the value within the form
            control, of a datatype that can express the difference between two values of the datatype bound to the form control</p></blockquote>
      </div>

      
      
      </div><div class="div2">
<h3><a name="ui-button"></a>1.9 button</h3><p>Description: This form control is similar to the XHTML
        element of the same name and allows for
        user-triggered actions. This form control may also be used to
        advantage in realizing other custom form controls.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button&gt;
Example unavailable at time of publication
&lt;/button&gt;</pre></td></tr></table><p>Data Binding Restrictions:</p><div class="note"><p class="prefix"><b>Note:</b></p><p>Binding a model item has no direct effect on a button, but provides a context for any event handlers that are attached.</p></div><p>Implementation Hints: Graphical implementations would typically render this form control as a push-button.</p>

      <div class="example">
        
<h5>Example: XML Representation: &lt;<code>button</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;button
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/button&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-output"></a>1.10 output</h3><p>Description: This form control renders a value from the instance data, but provides no means for entering or changing data. 
        This form control may be used in a <code>caption</code>,
        for instance,  when authors want to say: "I charged you <em>value</em> - and here is 
          why.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>I charged you
&lt;output ref="order/totalPrice"/&gt;
and here is why:</pre></td></tr></table>
      

      
      <p>A graphical browser might render an output form control as follows:</p>

      <p><img src="images/ui-output.png" alt="average-looking text, reading 'I charged you                   100.0 - and here is why:'"></p>
      <p>Data Binding Restrictions: The lexical value of the datatype bound to this form control is displayed, after processing as described in <a href="#"><b>???</b></a>.</p><p>Implementation Hints: An audio browser might apply  properties to this form control to
        <em>aurally highlight</em>
        the displayed value to provide audio formatted output.</p><div class="example">
<h5>Example: XML Representation: &lt;<code>output</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;output
 id = xsd:ID
 ref = binding-expression
 xform = instance data selector
 format = formatting-expression
&gt;
  &lt;!-- empty content --&gt;
&lt;/output&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>id = xsd:ID</b> - Optional unique identifier used for linking.<br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a><br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.<br><b>format = formatting-expression</b> - Optional format specifier</p></blockquote>
      </div><table border="1" summary="Editorial note"><tr><td width="50%" valign="top" align="left"><b>Editorial note</b></td><td width="50%" valign="top" align="right">&nbsp;</td></tr><tr><td valign="top" align="left" colspan="2">We need to decide on how we define attribute
          <code>format</code> on form control
          <code>output</code>.
          The functionality needed is similar to what
          functions like <code>printf</code> typically
          take.</td></tr></table></div><div class="div2">
<h3><a name="ui-submit"></a>1.11 submit</h3><p>Description: This form control submits all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit xform="timecard"&gt;
  &lt;caption&gt;Submit&lt;/caption&gt;
&lt;/submit&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>submit()</code> method.</p><div class="example">
<h5>Example: XML
          Representation: &lt;<code>submit</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;submit
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/submit&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
      </div></div><div class="div2">
<h3><a name="ui-reset"></a>1.12 reset</h3><p>Description: This form control resets to the initial values all or part of the instance data to which it is bound.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset ref="/tcard/data" xform="timecard"&gt;
  &lt;caption&gt;Reset totals&lt;/caption&gt;
&lt;/reset&gt;</pre></td></tr></table><p>Implementation Hints: The default handling for this controls is equivalent to the <code>reset()</code> method.</p><div class="example">
        
<h5>Example: XML Representation:
          &lt;<code>reset</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;reset
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/reset&gt;</pre></td></tr></table>
        <blockquote><p>
          <b>common attributes </b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  
  
<div class="div2">
    
<h3><a name="ui-common"></a>1.13 Common Markup</h3>
    
    <p>
      The preceding form control definitions make reference to several child elements and attributes that are common to several of the XForms form controls. This section defines these common markup components.</p>

    <div class="div3">
      
<h4><a name="ui-common-attributes"></a>1.13.1 Common Attributes</h4>
      <div class="issue"><p class="prefix"><a name="XHTML-attrs"></a><b>Issue (XHTML-attrs):</b></p><p>XHTML defines two attributes on element
          <code>html:form</code>--<code>accept</code>
          and <code>accept-charset</code>. Additionally, attribute
          <code>accept-charset</code> also appears on element
          <code>html:input</code>.
          We need to bring the equivalent to these into the XForms specification.</p></div>
      <div class="example">
        
<h5>Example: XML Representation: Common Attributes</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>xmlns = xsd:anyURI
xml:lang = xsd:language
id = xsd:ID
class = space separated list of classes
style = associated style info
ref = binding-expression
xform = xsd:IDREF
navIndex = xsd:nonNegativeInteger : 0
accessKey = xsd:token</pre></td></tr></table>
        <blockquote><p> 
          <b>xmlns = xsd:anyURI</b> - Optional standard XML attribute for identifying an XML namespace.
          <br><b>xml:lang = xsd:language</b> - Optional standard XML attribute to specify a human language for this element.
          <br><b>id = xsd:ID</b> - Optional unique identifier used for linking.
          <br><b>class = space separated list of classes</b> - Optional selector for a style rule.
          <br><b>style = associated style info</b> - Optional inline style specification.
          <br><b>ref = binding-expression</b> - <a title="" href="#">Binding expression</a>. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>xform = xsd:IDREF</b> - Optional   instance data selector. Details in the chapter <a href="#"><b>???</b></a>.
          <br><b>navIndex = xsd:nonNegativeInteger : 0</b> - Optional attribute is a non-negative integer in the range of 0-32767 used 
            to define the navigation sequence. This gives the author control over the 
            sequence in which <a title="" href="#">form control</a>s 
            are traversed. The default navigation order is specified in the chapter <a href="#"><b>???</b></a>.<br><b> accessKey = xsd:string</b> - Optional attribute defines a shortcut for moving the input focus directly 
            to a particular <a title="" href="#">form control</a>. 
            The value of this is typically a single character which when pressed together 
            with a platform specific modifier key (e.g. the <em>alt</em> key) results 
            in the focus being set to this <a title="" href="#">form 
              control</a>.
          
        </p></blockquote>
      </div>
      
      <p>
        CSS properties for controlling the look and feel of
        XForms form controls are being defined in
        conjunction with the CSS Working Group.  This version
        of the XForms working draft defines the XForms form controls independent of visual
        presentation. Additionally, sample default
        visual presentations are shown for each form control
        defined in this Working Draft.  The CSS Working Group
        has agreed to help us develop a default CSS stylesheet
        capable of producing the sample default renderings
        illustrated in this working draft.  The results of the
        above will be used to document the use of CSS
        properties within XForms user interface elements for
        the final version of the XForms specification.</p>

      
    </div>
    <div class="div3">
      
<h4><a name="ui-common-elements"></a>1.13.2 Common Child Elements</h4>
      
      <p>
        Child elements <code>caption</code>, <code>help</code> and
        <code>hint</code> detailed below provide the ability to attach human-readable
        metadata to XForms form controls.
      </p>

      
      <p>Instead of supplying such metadata e.g., the label
        for a form control, as inline content of
        the contained element <code>caption</code>, the metadata can be
        pointed to by using a simple XLink attribute
        <code>xlink:href</code> on element <code>caption</code> (or <code>hint</code> or <code>help</code>).
        Notice that systematic use of this feature can be
        exploited in internationalizing XForms user interfaces
        by:
        
      </p>

      <ul><li><p>Factoring all human readable
            messages to a separate
            resource XML file.</p></li><li><p>Using URIs into this XML resource
            bundle within individual caption
            elements</p></li><li><p>Finally, an XForms
            processor can use content negotiation to obtain the
            appropriate XML resource bundle,
            e.g., based on the <code>accept-language</code>
            headers from the client, to serve up the user
            interface with messages localized to the
            client's locale.</p></li></ul><div class="div4">
        
<h5><a name="ui-common-elements-caption"></a>1.13.2.1 caption</h5>
        
        <p>The required element <code>caption</code>  labels the containing form control with
          a descriptive label. Additionally, the caption makes it possible
          for someone who can't see the form control to
          obtain a short description while navigating
          between form controls.</p>


        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>caption</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;caption
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/caption&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes</b> defined in
              <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        <p>An accessibility aid would typically speak the metadata
          encapsulated in element <code>caption</code> when the
          containing form control gets focus.</p>
      </div>
      <div class="div4">
        
<h5><a name="ui-common-elements-help"></a>1.13.2.2 help</h5>
        
        <p>
          The optional element <code>help</code> provides a longer
          description that will help users  understand how
          to fill out this <a title="" href="#">form control</a>.
          The <code>help</code> text will   be shown only
          on request.</p>

        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>help</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;help
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/help&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined
              in <a href="#"><b>???</b></a>
          </p></blockquote>
        </div>

        
        <p>A graphical browser might render help as follows:</p>

        <p><img src="images/ui-password-with-help.png" alt="a                     password entry field, with a popup window below,                     displaying instructions for retrieving a forgotton                     password"></p><p>An accessibility aid might speak this
          information upon request.</p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-hint"></a>1.13.2.3 hint</h5>
        
        <p>
          The optional element <code>hint</code> provides a short
          hint for the user, typically represented as a
          tooltip by graphical user agents.  The tooltip
          text will normally be shown when the user remains
          on the form control for more than a certain length
          of time.  Accessibility aids might render such
          tooltips using speech. This element is optional,
          and its content model is mixed.</p>

        <div class="example">
          
<h5>Example: XML Representation:
            &lt;<code>hint</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;hint
  (common attributes)
&gt;
  &lt;!-- mixed content --&gt;
&lt;/hint&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>common attributes </b> defined in <a href="#"><b>???</b></a></p></blockquote>
        </div>

        
        <p>A graphical browser might render hints as follows:</p>

        <p><img src="images/ui-textbox-with-hint.png" alt="an average-looking text entry field, with a mouse pointer visible and a tooltip below, reading 'Please enter the number and street name'"></p>
      </div>

      <div class="div4">
        
<h5><a name="ui-common-elements-onevent"></a>1.13.2.4 onevent</h5>
        
        <p>
          This element can be used to bind event handlers to
          form controls. It is defined in <a href="#">[ref-xhtml-events]</a>. Details on XForms events
          can be found in the chapter
          <a href="#"><b>???</b></a>.</p>

        
        <div class="example">
          
<h5>Example: XML Representation: &lt;<code>onevent</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;onevent
  (attributes defined in XHTML Events)
&gt;
  &lt;!-- Action handlers --&gt;
&lt;/onevent&gt;</pre></td></tr></table>
        </div>
        <p>
          Element <code>onevent</code> is defined in the XHTML Events
          module.
          It declares   an event listener 
          by specifying the event  to handle  and the event handler to
          invoke.</p>
      </div>
      
    <div class="div4">
<h5><a name="ui-common-elements-item"></a>1.13.2.5 item</h5>

        <p>This element is used within list form controls to represent a single item of the list.</p>
        <div class="issue"><p class="prefix"><a name="onevent-for-item"></a><b>Issue (onevent-for-item):</b></p><p>Should onevent handlers be allowed here for individual items in a list?</p></div><div class="example">
<h5>Example: XML Representation: &lt;<code>item</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;item
  value = lexical-representation
&gt;
  &lt;!-- #PCDATA --&gt;
&lt;/item&gt;</pre></td></tr></table>
          <blockquote><p>
            <b>value = lexical-representation</b> - the "storage value" for the item, to be placed in the instance data when this item is chosen.</p></blockquote>
        </div>
      </div><div class="div4">
<h5><a name="ui-common-elements-choices"></a>1.13.2.6 choices</h5>
        <p>This element is used within list form controls to group items. This provides the same functionality as element <code>optgroup</code> in HTML 4.0.</p>
        <div class="example">
<h5>Example: XML Representation: &lt;<code>choices</code>&gt;</h5>
          <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;choices&gt;
  &lt;!-- (item | choices)+ --&gt;
&lt;/choices&gt;</pre></td></tr></table>
          
        </div>
      </div></div>
  </div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1"> 
<h2><a name="terms"></a>1 Terminology</h2> <dl>  <dt class="label">binding</dt> 
<dd> 
<p>[<a title="binding" name="def-binding">Definition</a>: The connection between a form control and a
       model item and an instance data item, represented as a binding expression.]</p> 
    </dd> 
    
    
    <dt class="label">binding expression</dt> 
    <dd> 
      <p>[<a title="binding expression" name="def-binding-expression">Definition</a>: An XPath
       addressing expression used by the binding to connect form controls to other
       parts of XForms.]</p> 
    </dd> 
    
    
    <dt class="label">computed expression</dt> 
    <dd> 
      <p>[<a title="computed expression" name="def-computed-expression">Definition</a>: An XPath
       expression used by model item properties such as relevant and calculate to
       include dynamic functionality in XForms.]</p> 
    </dd> 
    
    
    <dt class="label">containing document</dt> 
    <dd> 
      <p>[<a title="containing document" name="def-containing-document">Definition</a>: A specific
      document, for example an XHTML document, in which one or more &lt;xform&gt; elements
      are found.]</p> 
    </dd> 
        
    <dt class="label">datatype</dt> 
    <dd> 
      <p>[<a title="datatype" name="def-datatype">Definition</a>: A 3-tuple, consisting of a) a
      set of distinct values, called its value space, b) a set of lexical
      representations, called its lexical space, and c) a set of facets that
      characterize properties of the value space, individual values or lexical items.
      This definition is taken from XML Schema <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
    
    
    <dt class="label">facet</dt> 
    <dd> 
      <p>[<a title="facet" name="def-facet">Definition</a>: A single defining aspect of a
       value space. Generally speaking, each facet characterizes a value space along
       independent axes or dimensions. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p>
    </dd> 
    
    
    <dt class="label">form control</dt> 
    <dd> 
      <p>[<a title="form control" name="def-form-control">Definition</a>: A user interface
       control or "widget" that serves as a point of user interaction.]</p> 
    </dd> 
   
    
    <dt class="label">instance data</dt>
    <dd> 
      <p>[<a title="instance data" name="def-instance-data">Definition</a>: An internal tree representation
      of the values and state of all the instance data items associated with a particular form.]</p> 
    </dd> 
   
    
    <dt class="label">instance data item</dt> 
    <dd> 
      <p>[<a title="instance data item" name="def-instance-data-item">Definition</a>: An internal representation
      of the value and state of a single piece of data corresponding to a Schema simpleType,
      constrained by the definition of a model item.]</p> 
    </dd> 
   
    
    <dt class="label">lexical space</dt> 
    <dd> 
      <p>[<a title="lexical space" name="def-lexical-space">Definition</a>: A lexical space is the
      set of valid literals for a datatype. This definition is taken from XML Schema
      <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">model item</dt> 
    <dd> 
      <p>[<a title="model item" name="def-model-item">Definition</a>: An abstract unit of data-collection
      within the XForms Model, which defines a XML Schema datatype and possibly other form-specific
      constraints on a single piece of collected data.]</p> 
    </dd> 
   
    
    <dt class="label">model item property</dt> 
    <dd> 
      <p>[<a title="model item property" name="def-model-item-property">Definition</a>: A single, XForms-specific
      defining aspect of a model item..]</p> 
    </dd> 
   
    
    <dt class="label">value space</dt> 
    <dd> 
      <p>[<a title="value space" name="def-value-space">Definition</a>: A set of values for
       a given datatype. Each value in the value space of a datatype is denoted by one
       or more literals in its lexical space. This definition is taken from XML Schema
       <a href="#">[ref-xschema-2]</a>.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Model</dt> 
    <dd> 
      <p>[<a title="XForms Model" name="def-XForms-Model">Definition</a>: The non-visible
       definition of an XML form as specified by XForms. The XForms Model defines the
       individual model items and constraints and other run-time aspects of XForms.]</p> 
    </dd> 
   
    
    <dt class="label">XForms Processor</dt> 
    <dd> 
      <p>[<a title="XForms Processor" name="def-XForms-Processor">Definition</a>: A
       software application or program that implements the XForms
       specification.]</p> 
    </dd> 
   
   
  </dl> 
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="acks"></a>A Acknowledgements (Non-Normative)</h2> 
<p>The Authors of this document are:</p>
<ul>
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li>
  <li> 
    Micah Dubinko 
    , Cardiff 
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li>
  <li> 
    Roland Merrick 
    , IBM 
  </li>
  <li> 
    T. V. Raman 
    , IBM 
  </li>
  <li>
    Linda Bucksay Welsh
    , Intel
     (<i>Until April 2001</i>) 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
    </li>
    <li>
      Rob McDougall 
      , JetForm Corporation 
    </li>
  <li>
    John McCarthy
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Frank Olken
    , Lawrence Berkeley National Laboratory
     (<i>Until November 2000</i>) 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li>Panagiotis Reveliotis
    , Phillips
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li><li>Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li>
    Dave Raggett
    , W3C/OpenWave
     (<i>Until December 2000</i>) 
  </li>
  <li> 
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>
  
  <p>This document was written with the participation of the XForms Working
        Group, which currently consists of the following members:</p> 
<ul> 
  <li> 
    Steven Pemberton 
    , CWI 
     (<i>co-chair</i>)  
  </li><li> 
    Sebastian Schnitzenbaumer 
    , Mozquito Technologies 
     (<i>co-chair</i>)  
  </li><li> 
    Micah Dubinko 
    , Cardiff 
  </li> 
  <li>
    Driss Eddaifi
    , Ecole Mohammadia d'Ing&eacute;nieurs
  </li>
  <li>
    Michalis Petropoulos
    , Enosys Markets, Inc.
  </li>
  <li> 
    Peter Stark 
    , Ericsson 
  </li> 
  <li> 
    Frank Boumphrey 
    , HTML Writer's Guild 
  </li> 
  <li> 
    Roland Merrick 
    , IBM 
  </li><li> 
    T. V. Raman 
    , IBM 
  </li> 
  <li>
    Gavin McKenzie 
    , JetForm Corporation 
  </li>
  <li>
    Rob McDougall 
    , JetForm Corporation 
  </li>
  <li>
    Ray Waldin 
    , Lexica, LLC 
  </li> 
  <li> 
    Tantek &Ccedil;elik 
    , Microsoft 
  </li> 
  <li> 
    Alex Hopmann 
    , Microsoft 
  </li> 
  <li>Dave Hyatt
    , Netscape/AOL
  </li>
  <li> 
    Eric Pollmann 
    , Netscape/AOL 
  </li>
  <li>
    Tom Butcher
    , OpenDesign
  </li> 
  <li> 
    K. P. Lee 
    , Phillips 
  </li> 
  <li> 
    Roli Wendorf 
    , Phillips 
  </li> 
  <li> 
    Ted Wugofski 
    , Openwave 
  </li> 
  <li> 
    David Cleary 
    , Progress Software 
  </li> 
  <li> 
    Mike Mansell 
    , PureEdge 
  </li> 
  <li> 
    Dave Manning 
    , PureEdge 
  </li>
  <li>
    Josef Dietl
    , Mozquito Technologies
  </li>
  <li>Michael Fergusson
    , Softquad
  </li> 
  <li> 
    Zoe Lacroix 
    , SurroMed, Inc. 
  </li>
  <li>
    Masayasu Ishikawa
    , W3C
  </li> 
  <li>
    Leigh Klotz 
    , Xerox 
  </li> 
</ul>

<p>The XForms Working Group has benefited in its work from the
        participation and contributions of Invited Experts:</p> 
<ul> 
  <li> 
    Tom Schnetlage 
    , University of Berkeley 
  </li> 
  <li> 
    Dan Gillman 
    , Federal Bureau of Labor Statistics 
  </li> 
  <li> 
    Eliot Christian 
    , U.S. Geological Survey 
  </li>
  <li>
    Mikko Honkala
    , Helsinki University Of Technology
  </li>
</ul>

<div class="note"><p class="prefix"><b>Note:</b></p><p><em>Additional Acknowledgments</em>: The editors would like to thank Kai Scheppe, Malte 
  Wedel and G&ouml;tz Bock for lots of constructive criticism on early versions 
  of the chapter <a href="#"><b>???</b></a> and their contributions to its present content.</p></div>
</div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
<h2><a name="changes"></a>A Changes from Previous Release (Non-Normative)</h2>
 
  <div class="div2"> 
    
<h3><a name="changes-overall"></a>1 Changes since the 16-Feb-2001 release</h3> 
  <p>There have been significant changes to the XForms since our last public draft. In addition, we have switched over to authoring the specification using xmlspec.dtd from writing raw HTML (details at <a href="#"><b>???</b></a>). The change from hand-authored HTML to xmlspec has introduced changes throughout the document, and consequently, adding diff marks for each change would be excessively distracting and make this appendix difficult to read. Instead, this section summarizes how things have changed so that readers familiar with the previous draft can get up to to speed with the new specification.</p></div> 
<div class="div2">
<h3><a name="changes-about"></a>2 Changes to Chapter 1 'About XForms'</h3><p>The typographic samples have been updated to work better with the XMLspec publishing system.</p></div><div class="div2">
<h3><a name="changes-concepts"></a>3 Changes to Chapter 2 'Concepts'</h3><p>This chapter has been completely updated. The new version contains a samples of complete forms and a step-by-step guide through the most common functionality in XForms.</p></div><div class="div2">
<h3><a name="changes-terms"></a>4 Changes to Chapter 3 'Terminology'</h3><p>Terms have been cleaned-up and brought into line with the rest of the document. The term "datatype" has been imported from XML Schema. The terms "computed expression", "containing document", and "model item property" are new.</p></div><div class="div2">
<h3><a name="changes-datatypes"></a>5 Changes to Chapter 4 'Datatypes'</h3><p>The Working Group has decided to more directly reference XML Schema datatypes, hence this chapter has been restructured to include by reference Schema datatypes, and define any additional types. Remaining issues are listed within the chapter.</p></div><div class="div2">
<h3><a name="changes-model"></a>6 Changes to Chapter 5 'XForms Model'</h3><p>Removed all "simple syntax". Clarified how computed model item properties (including calculate) work. Improved terminology, consistently using terms from chapter 3.</p><p>Open and closed enumerations are now under separate headings. Removed 'group' to UI chapter. Renamed "Arrays" section to "Multiple Simultaneous Values", and added section "Repeating Line Items". Renamed "Switch" to "Alternate Representation", with a pointer to the UI section.</p><p>Significant changes to this chapter, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-expr"></a>7 Changes to Chapter 6 'XPath Expressions in XForms'</h3><p>This chapter was previously named "Dynamic Constraint Language". The new title more accurately describes both the chapter and the role of XPath within XForms. The term "Dynamic Constraints Language" has been removed throughout the remainder of the document as well.</p><p>New introductory material describes the various ways XPath is used throughout XForms. The "Instance Data" section formerly residing in the Processing Model chapter is now in this chapter. The section on Datatypes now describes which parts of XForms use XPath datatypes and which use XML Schema datatypes.</p><p>The BNF productions have been removed, in favor of stronger wording that XPath is to be used directly.</p><p>The section "Evaluation Context" has been more thoroughly cross-checked against the XPath specification, with several underspecified areas now addressed.</p><p>The large set of custom operators has been replaced with a NOTE referencing the built-in XPath operators.</p><p>New functions defined--<code>count-non-empty(node-set)</code>, and <code>xforms-property(string)</code>.</p><p>Several of the functions have been specified in greater detail.</p><p>The extensibility section now makes a reference to a possible direction--the <code>element-available()</code> and <code>function-available()</code> functions.</p></div><div class="div2">
<h3><a name="changes-controls"></a>8 Changes to Chapter 7 'Form Controls'</h3><p>Originally part of the chapter "XForms User Interface". Now split into a separate chapter. The material in this new chapter has been restructured for readability.</p><p>The "Design Input" section has been removed. Further details are available in the XForms Requirements document.</p><p> 

 

Note that names of form controls have changed, but are  not yet cast in stone. The following changes and additions have been made to the core form controls:

</p><blockquote><p>hidden has been removed as a form control<br>output, textbox, submit, and reset  have kept their same names<br>exclusiveSelect and multipleSelect have been renamed selectOne and selectMany<br>checkbox is now selectBoolean<br>password is now secret<br>button has been fleshed out, including event listener details<br>uploadMedia and range are new form controls in this Working Draft</p></blockquote><p>The "AnyControl" is now described in prose instead of formally. In addition, there are minimal changes to the common elements and attributes defined in this section. Element onevent is now taken from the XHTML Events module and is therefore no longer defined in detail in this specification. A later section defines XForms-specific event handlers for use within event listeners declared via element onevent.</p></div><div class="div2">
<h3><a name="changes-ui"></a>9 Changes to Chapter 8 'XForms User Interface'</h3><p>The section "Future Work" has been removed.</p><p>The specification now  introduces constructs for authoring conditional user interfaces (see switch) and a construct for authoring repeating widgets (see repeat) for use in creating purchase orders or shopping carts that wish to create the user interface needed for populating repeating rows from a table.</p><p>Conditional User Interfaces: 
This is a new section, and defines construct switch along with its associated event handlers.</p><p>New Construct repeat:
There is a new section that defines construct repeat for authoring things like shopping carts where the user interface for populating a structure needs to be repeated multiple times.</p><p>UI  Templates: 
Constructs for creating and using user interface templates have been renamed for consistency. The new element names are uiTemplate and useUITemplate.</p><p>Constructing High-level User Interfaces:
The content pertaining to creating higher-level user interfaces from the basic building blocks has been substantially reorganized. This portion of the specification first defines construct group used to group user interface controls. Element group no longer defines an XForms-specific layout model; instead all layout attributes come from CSS. This enables XForms user interfaces to be laid out using either CSS or XSL:FO, or for that matter languages such as SVG.</p><p> 

Subforms And Subpages:
With the XForms constructs for authoring higher level user interaction now fleshed out, it turns out that there is no need for an XForms-specific subform or subpage construct --we can leverage existing mechanisms such as group and more generally, XHTML's div elements for this purpose.</p></div><div class="div2">
<h3><a name="changes-binding"></a>10 Changes to Chapter 9 'Binding'</h3><p>Some of the text has been cleaned up with regard to the relationship with XPath, but otherwise no significant content changes.</p></div><div class="div2">
<h3><a name="changes-structure"></a>11 Changes to Chapter 10 'Document Structure'</h3><p>This chapter was previously named "Using XForms with Other Document Types". Added new section "Integration with XLink". Updated examples to reflect xlink namespace. </p></div><div class="div2">
<h3><a name="changes-rpm"></a>12 Changes to Chapter 11 'Processing Model and Conformance'</h3><p>Cleaned up terminology and brought into greater consistency with the rest of the document.</p><p>Removed the <code>locale</code> property; separated the rest into those that can vary from one <code>xform</code> element to the next, and those that are the same across the containing document. Renamed <code>use-nulls</code> to <code>use-nil</code>.</p><p>The "suspend" functionality has been removed, including the <code>xforms-suspend</code> event, and will appear in a post-1.0 version of XForms. The <code>xforms-resume</code> event has been renamed <code>xforms-initialize</code>. Clarified that model items are associated with only a single value.</p><p>The "instance data" section has moved to the XPath Expressions chapter, though rules for constructing instance data are still in this chapter, and reworded for clarity.</p><p>The multipart/form-data section has been replaced with a reference to RFC 2388.</p><p>An early  conformance section has been added.</p></div><div class="div2">
<h3><a name="changes-schema"></a>13 Changes to Appendix  'Schema for XForms'</h3><p>For this release, the Schema only covers the XForms form controls and the Document Structure markup.</p><p>Significant changes to this appendix, bringing it into much closer alignment with XML Schema, were not available for publication at this time and will appear in a near-future Working Draft.</p></div><div class="div2">
<h3><a name="changes-xslt"></a>14 Changes to Appendix 'XSLT from Simple Syntax'</h3><p>Following the Working Group decision to remove the simple syntax, this appendix has also been removed.</p></div><div class="div2">
<h3><a name="changes-samples"></a>15 Change to Appendix 'Sample Forms'</h3><p>Sample forms have been incorporated into <a href="#"><b>???</b></a></p></div><div class="div2">
<h3><a name="changes-optional"></a>16 Changes to Appendix 'Optional Function Library'</h3><p>The Working Group has decided to remove all optional functions from XForms.</p></div><div class="div2">
<h3><a name="changes-references"></a>17 Changes to Appendix 'References'</h3><p>References have been updated to refer to the changes in document status, most notably the XML Schema recommendation. New normative reference to XLink, RFC2388; informative reference to T. V. Raman's book on auditory user interfaces. Removed orphaned references to ISO 8601, RFC 2369, RFC 2141 and moved  the orphaned Unicode reference to the informative section.</p></div></div><!DOCTYPE div PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<div class="div1">
  
<h2><a name="controls"></a>1 Form Controls</h2>
  <div class="div2">
    
<h3><a name="ui-intro"></a>1.1 Introduction</h3>
    
    <p>
      XForms User Interface controls, also called <a title="" href="#">form control</a>s, are declared using
      markup elements, and their behavior refined via
      markup attributes. This markup may be further
      decorated with style properties that can be set
      using CSS stylesheets to deliver a customized look
      and feel. Form controls defined
      here are bound to the underlying instance data
      using the <a title="" href="#">binding</a> attributes as defined in the
      chapter <a href="#"><b>???</b></a>.</p>

    
    <p>
      The XForms form controls enable
      accessibility by taking a uniform approach to such
      features as captions, help text, tabbing and keyboard
      shortcuts.  Internationalization issues are being
      addressed in conjunction with the Internationalization
      Working Group and are addressed by following the same
      design principles as within the rest of XHTML. All form controls defined here are suitable for implementation as Aural CSS (ACSS) form controls.</p>

    <p>
        Several XForms form controls are of a general class that represent the concept of
        selecting from available choices.  Such selection
        controls can be characterized along a presentational
        dimension that is completely orthogonal to the
        functional distinction.  Distinguishing the
        <em>presentational</em> from the
        <em>functional</em> dimension allows the
        expression of the <em>meaning</em> of a
        particular form control--see <a href="#">[aui-conversational-gestures]</a> for a definition
        of such high-level  user interaction primitives.</p>
      

      <p>This chapter includes non-normative graphical
      examples of many form controls.
      The CSS Working Group is providing assistance with creating
      default CSS rules for producing visual renderings 
      of standard XForms form controls. This
      specification will also include non-normative rules for
      how these same controls might be rendered to alternative
      access modalities.</p><div class="issue"><p class="prefix"><a name="control-names"></a><b>Issue (control-names):</b></p>
      <p>All form control names listed here should be considered advisory until further consensus is reached in the Working Group.</p>
    </div><p>For each form control, the following aspects will be defined:</p>

  <blockquote><p>Description<br>Examples<br>Data Binding Restrictions<br>Implementation Hints<br>XML Representation</p></blockquote><p>The form controls defined here use common attributes and elements that are defined later in this chapter (<a href="#"><b>???</b></a>).</p></div>
  
  <div class="div2">
<h3><a name="ui-entry"></a>1.2 textbox</h3><p>Description: This form control enables free-form data entry.</p><p>Examples:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox ref="order/shipTo/street" style="width:xx; height:xx"&gt;
 &lt;caption&gt;Street&lt;caption&gt;
 &lt;help&gt;Please enter the number and street name&lt;/help&gt;
&lt;/textbox&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes <code>height</code>
        and <code>width</code>
        specify the display size of the form control. Note
        that the constraints on how much text can be input are
        obtained from the underlying XForms Model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render the above example as follows:</p>

      <p><img src="images/ui-textbox.png" alt="an average-looking text entry field. The title, 'street' has been automatically aligned to the left"></p>
    <p>Data Binding Restrictions: The entered value of the form control (after processing as described in <a href="#"><b>???</b></a>) is treated as a lexical value. A datatype bound to this form control will be treated as a restriction upon the allowed entered value.</p><p>Implementation Hints: Implementations may represent this form control with more than one native user interface control, for example a form control that appears to be three separate smaller entry fields for "day", "month", and "year" for a date datatype. Further, for date datatypes, a calendar system for data entry may be used, including non-Gregorian calendar systems. For numeric datatypes, additional features might include spin buttons or other conveniences. When bound to a datatype that accepts newline characters, this form control should accept multi-line input.</p><div class="example">
        
<h5>Example: XML Representation: &lt;<code>textbox</code>&gt;</h5>
        
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;textbox
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/textbox&gt;</pre></td></tr></table><blockquote><p>
          <b>common attributes</b> defined in
            <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  <div class="div2">
<h3><a name="ui-secret"></a>1.3 secret</h3><p>Description: This form control is used for obtaining   information that is considered sensitive, and thus  not echoed
        to a visual or aural display as it is being entered, e.g., password entry.</p><p>Example:</p><table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret ref="/login/password" style="width:xx; height:xx"&gt;
  &lt;caption&gt;Please enter your password --it will not be visible as you type.&lt;caption&gt;
&lt;/secret&gt;</pre></td></tr></table><p>
        In the above, CSS style attributes
        <code>height</code> and <code>width</code> specify
        the display size of the form control. Note that
        the constraints on how much text can be input are
        obtained from the underlying XForms model definition
        and not from these display properties.</p>

      

      
      <p>A graphical browser might render this form control
        as follows:</p>

      <p><img src="images/ui-password.png" alt="an                   average-looking text entry field, with '*'                   characters where the text would be                   expected"></p>
      <p>Data Binding Restrictions: Identical to <code>textbox</code>.</p><p>Implementation Hints: In general,  implementations, including accessibility aids, would render a "*" or similar character instead of  the actual characters entered, and thus would  not render the entered value of this form control. Note that this provides only a casual level of security; truly sensitive information will require additional security measures outside the scope of XForms.</p><div class="example">
<h5>Example: XML Representation
          &lt;<code>secret</code>&gt;</h5>
        <table summary="Example" width="100%" bgcolor="#99ffff" border="1" cellpadding="5" class="eg"><tr><td><pre>&lt;secret
  (common attributes)
&gt;
  &lt;!-- caption, help?, hint?, onevent? --&gt;
&lt;/secret&gt;</pre></td></tr></table>
        <blockquote><p>

          <b>common attributes</b> defined 
            in <a href="#"><b>???</b></a>
        </p></blockquote>
      </div></div>
  
  
  
  <div class="div2">
<h3>